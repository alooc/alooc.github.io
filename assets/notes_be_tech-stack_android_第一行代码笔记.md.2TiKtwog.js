import{_ as s,c as a,o as p,ag as l}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"第一行代码笔记","description":"","frontmatter":{"title":"第一行代码笔记","date":"2020-01-01T09:02:55.000Z","categories":["后端技术","android"],"tags":["android"]},"headers":[],"relativePath":"notes/be/tech-stack/android/第一行代码笔记.md","filePath":"notes/be/tech-stack/android/第一行代码笔记.md"}'),e={name:"notes/be/tech-stack/android/第一行代码笔记.md"};function t(i,n,c,o,r,d){return p(),a("div",null,n[0]||(n[0]=[l(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1.</span></span>
<span class="line"><span>	log工具使用方便强大</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	不要再使用system.out.println打印日志了，</span></span>
<span class="line"><span>	注意Javaweb中的自动化测试</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.</span></span>
<span class="line"><span>	Activity 包含用户界面的组件</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	使用intent连接活动之间的跳转和数据传输</span></span>
<span class="line"><span>	活动的声明周期，运行、暂停、停止、销毁</span></span>
<span class="line"><span>		运行：在栈顶，正在操作</span></span>
<span class="line"><span>		暂停：仍显示在界面中，但不是栈顶，不是正在操作的对象</span></span>
<span class="line"><span>		停止：栈中存在，界面不存在</span></span>
<span class="line"><span>		销毁：栈中没有</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		onCreate</span></span>
<span class="line"><span>		onRestart onStart</span></span>
<span class="line"><span>		onResume</span></span>
<span class="line"><span>		onPause</span></span>
<span class="line"><span>		onStop    </span></span>
<span class="line"><span>		onDestory</span></span>
<span class="line"><span>	活动的启动模式：</span></span>
<span class="line"><span>		标准启动，是默认的</span></span>
<span class="line"><span>		singleTop  该活动如果在栈顶的话，启动时，不再创建新的实例 ;但是，栈中已经存在，却不在栈顶，仍会创建一个新的实例</span></span>
<span class="line"><span>		singleTask 该活动再栈中存在，直接将它上面的栈中元素出栈，然后取出它，不会创建新的实例;但是，取出的活动，已经销毁了</span></span>
<span class="line"><span>		singleInstance  创建新的返回栈，共享返回栈</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	活动的最佳实践：	</span></span>
<span class="line"><span>		编程中有很多小技巧，使用这些技巧可以带来极大的便利</span></span>
<span class="line"><span>			继承的妙用</span></span>
<span class="line"><span>		</span></span>
<span class="line"><span>			可以写一个所有活动和器父类之间的中间类，用它来统一这些活动的行为</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		知晓当前的活动</span></span>
<span class="line"><span>		随时随地退出程序  写一个管理活动类来管理，活动创建时添加，活动销毁时减少，并添加一个可以销毁全部活动的方法</span></span>
<span class="line"><span>		启动活动的最佳写法，传递数据时单独写一个方法</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3.</span></span>
<span class="line"><span>	控件</span></span>
<span class="line"><span>	布局</span></span>
<span class="line"><span>	ListView</span></span>
<span class="line"><span>	Recycler</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4.</span></span>
<span class="line"><span>	碎片</span></span>
<span class="line"><span>	动态的增加碎片</span></span>
<span class="line"><span>	返回栈</span></span>
<span class="line"><span>	 </span></span>
<span class="line"><span>	代码域xml结合开发</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>	Java 的回调机制</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>	内容提供者</span></span>
<span class="line"><span>	服务</span></span>
<span class="line"><span>	网络</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>12 MaterialDesign</span></span>
<span class="line"><span>	ToolBar  </span></span>
<span class="line"><span>	滑动菜单 DrawerLayout</span></span>
<span class="line"><span>	悬浮按钮 FloatingActionButton</span></span>
<span class="line"><span>	交互式通知 Snackbar</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	CoordinatorLayout </span></span>
<span class="line"><span>	CardView</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	AppBarLayout  解决标题栏被遮挡的问题</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	下拉刷新 SwipeRefreshLayout</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	可折叠式标题栏 CollaspingToolbarLayout</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	系统工作栏透明</span></span>
<span class="line"><span></span></span>
<span class="line"><span>13 高级技巧</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	1.自定义自己的Application类</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	2.Intent传输对象</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	3.定制自己的日志工具，在自定义类中控制log的打印等级</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	4.调试Andriod程序</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	5.创建定时任务</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	6.多窗口模式编程     分屏</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	7.Lambda表达式</span></span>
<span class="line"><span>		</span></span>
<span class="line"><span>	implementation &#39;de.hdodenhof:circleimageview:3.1.0&#39;</span></span>
<span class="line"><span>	implementation &#39;com.android.support:design:28.0.0&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	implementation &#39;androidx.recyclerview:recyclerview:1.1.0&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	implementation &#39;androidx.cardview:cardview:1.0.0&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	implementation &#39;com.github.bumptech.glide:glide:4.5.0&#39;	</span></span>
<span class="line"><span>	 annotationProcessor &#39;com.github.bumptech.glide:compiler:4.5.0&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	implementation &#39;org.litepal.android:java:3.0.0&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	implementation &#39;com.squareup.okhttp3:okhttp:4.5.0&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	implementation &#39;com.google.code.gson:gson:2.8.6&#39;</span></span></code></pre></div>`,1)]))}const _=s(e,[["render",t]]);export{g as __pageData,_ as default};
