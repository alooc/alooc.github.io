import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as i,c as o,d as n,e as s,f as l,b as a}from"./app-64e721bb.js";const c="/assets/image-20210214114241607-5345b451.png",r="/assets/image-20210218143700833-a0fcd548.png",u="/assets/image-20210218155838-7c86ae89.png",d="/assets/image-20210218164645465-e831309b.png",k="/assets/image-20210218170936604-16a9f8f0.png",h="/assets/image-20210219172015433-46dd4e2f.png",v="/assets/image-20210219172214512-9d42455b.png",m="/assets/image-20210219172242800-ec35a2b9.png",b="/assets/image-20210220171825190-ff6fa34c.png",g="/assets/image-20210220171843983-0d1cefa3.png",f="/assets/image-20210220172311651-c88cecaa.png",_="/assets/image-20210220172743281-e01bb5f8.png",y={},x=a('<h1 id="_1-什么是javascript" tabindex="-1"><a class="header-anchor" href="#_1-什么是javascript" aria-hidden="true">#</a> 1. 什么是JavaScript</h1><h6 id="javascript历史回顾" tabindex="-1"><a class="header-anchor" href="#javascript历史回顾" aria-hidden="true">#</a> javascript历史回顾</h6><p>Mocha（后改名为LiveScript） =》 改名为JavaScript =》 ECMAScript作为实现JavaScript的标准</p><h6 id="javascript是什么" tabindex="-1"><a class="header-anchor" href="#javascript是什么" aria-hidden="true">#</a> JavaScript是什么</h6><p>完整的JavaScript的实现包括：核心（ECMAScript），文档对象模型（DOM），浏览器对象模型（BOM）</p><p>ECMAScript定义：语法，类型，语句，关键字，保留字，操作符，全局对象</p><p>DOM：Document Object Model 文档对象模型是一个API，用于在HTML中使用扩展的XML <code>DOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API可以轻松地删除、添加、替换、修改节点</code></p><p>BOM: 浏览器对象模型，用于 支持访问和操作浏览器的窗口</p><h6 id="javascript与ecmascript的关系" tabindex="-1"><a class="header-anchor" href="#javascript与ecmascript的关系" aria-hidden="true">#</a> JavaScript与ECMAScript的关系</h6><h6 id="javascript的不同版本" tabindex="-1"><a class="header-anchor" href="#javascript的不同版本" aria-hidden="true">#</a> JavaScript的不同版本</h6><figure><img src="'+c+`" alt="image-20210214114241607" tabindex="0" loading="lazy"><figcaption>image-20210214114241607</figcaption></figure><h1 id="_2-html中的javascript" tabindex="-1"><a class="header-anchor" href="#_2-html中的javascript" aria-hidden="true">#</a> 2. HTML中的JavaScript</h1><h6 id="使用script元素" tabindex="-1"><a class="header-anchor" href="#使用script元素" aria-hidden="true">#</a> 使用script元素</h6><p>该元素有8个属性</p><p>XHTML中的变化：</p><p>​ 在HTML中，解析script元素会应用相应特殊规则，XHTML中则没有这些规则。这意味着a&lt;b中的小于号会被解析成一个标签的开始，并且由于作为的标签开始的小于号后面不能有空格，这会导致语法错误。</p><p>​ 解决方法有两种:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>1.把所有小于号都换成对应的HTML实体形式（<span class="token entity named-entity" title="&lt;">&amp;lt;</span>）
2.把所有的代码都包含到一个CDATA块中
	<span class="token cdata">&lt;![CDATA[     ]]&gt;</span>

	在兼容XHTML的浏览器中，这样可以解决问题。不兼容的话必须用注释来抵消。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="行内脚本与外部脚本的比较" tabindex="-1"><a class="header-anchor" href="#行内脚本与外部脚本的比较" aria-hidden="true">#</a> 行内脚本与外部脚本的比较</h6><h6 id="文档模式对javascript有什么影响" tabindex="-1"><a class="header-anchor" href="#文档模式对javascript有什么影响" aria-hidden="true">#</a> 文档模式对JavaScript有什么影响</h6><h6 id="确保javascript不可用时的用户体验" tabindex="-1"><a class="header-anchor" href="#确保javascript不可用时的用户体验" aria-hidden="true">#</a> 确保JavaScript不可用时的用户体验</h6><p>使用noscript元素</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
        This page requires a JavaScript-enabled browser.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_3-语言基础" tabindex="-1"><a class="header-anchor" href="#_3-语言基础" aria-hidden="true">#</a> 3. 语言基础</h1><h6 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h6><ul><li><p>区分大小写</p></li><li><p>标识符，就是变量、函数、属性或函数参数的名称</p><ul><li>第一个字符必须是字母、下划线（_）或美元符号</li><li>剩下的其他字符可以是字母、下划线、美元符号或数字</li><li>使用小驼峰命名</li></ul></li><li><p>注释：</p><ul><li>单行 //</li><li>多行 /* */</li></ul></li><li><p>严格模式 添加预处理指令 &quot;use strict&quot;</p></li><li><p>语句</p></li></ul><h6 id="_2-关键字与保留字" tabindex="-1"><a class="header-anchor" href="#_2-关键字与保留字" aria-hidden="true">#</a> 2. 关键字与保留字</h6><p>不做为标识符或属性名</p><h6 id="_3-变量" tabindex="-1"><a class="header-anchor" href="#_3-变量" aria-hidden="true">#</a> 3. 变量</h6><p><code>变量是松散类型的，意思是变量可以用于保存任何类型的数据</code></p><p>有三个关键字可以声明变量：var const let</p><div class="language-she line-numbers-mode" data-ext="she"><pre class="language-she"><code>1. var关键字：
 1.var声明作用域
 	函数内部声明变量使用var，成为局部变量；不使用成为全局变量
 2.var声明提升

2. let声明：
 let声明的范围是块作用域
 var声明的范围是函数作用域
 
 1.暂时性死区
 2.全局声明
 	使用let在全局作用域中声明的变量不会成为window对象的属性。
 3.条件声明
 4.for循环中的let声明
 
3. const声明
 行为与let基本相同，唯一区别是它声明变量必须同时初始化变量，且尝试修改const声明的变量会导致运行时错误。简言之是用来声明常量的。声明引用类型，引用指针不能修改，改变指针指向的对象是不会改变指针引用的，因此对象的属性可修改。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明风格及最佳实践</p><ol><li>不使用var</li><li>const优先，let次之</li></ol><h6 id="_4-数据类型" tabindex="-1"><a class="header-anchor" href="#_4-数据类型" aria-hidden="true">#</a> 4. 数据类型</h6><ul><li>简单数据类型：Undefined、Null、Boolean、Number、String、Symbol</li><li>复杂数据类型：Object <ol><li>typeof 操作符</li></ol></li></ul><img src="`+r+'" style="zoom:67%;"><ol start="2"><li><p>Undefined类型：当使用var或let声明了变量但没有初始化时，就相当与给变量赋了undefined值。<code>增加这个特殊值的目的是为了正式明确空对象指针（null）和未初始化变量的区别</code></p></li><li><p>Null类型：只有一个值null。逻辑上讲，null值表示 一个空指针对象，所以typeof null &quot;object&quot;</p><p><code>在定义将来要保存对象值的变量时，建议使用null来初始化，这样只要检查这个变量的值是不是null就可以知道这个变量是否在后来重新赋予了一个对象的引用</code></p></li><li><p>Boolean类型：</p><ul><li><p>区分大小写</p></li><li><p>Boolean()转型函数可以在任意类型的数据上调用，而且始终返回一个布尔值</p><figure><img src="'+u+`" alt="image-20210218155838" tabindex="0" loading="lazy"><figcaption>image-20210218155838</figcaption></figure></li><li><p><code>if等流控制语句会自动执行其他类型值到布尔值的转换</code></p><pre><code>5. Number类型：

	1. 浮点值，存在舍入错误，永远不要测试某个特定的浮点值

	2. 值的范围：

- 最小值	Number.MIN_VALUE
- 最大值    Number.MAX_VALUE
- 负无穷大    Number.NEGATIVE_INFINITY    -Infinity
- 正无穷大    Number.POSITIVE_INFINITY     Infinity

	3. NaN 意思是“不是数值”（Not a Number）,用来表示本来要返回数值的操作失败了（而不是抛出错误）![image-20210218161417699](../../images/image-20210218161417699.png)

isNaN()
</code></pre></li></ul><ol start="4"><li><p>数值转换：<code>有3个函数可以将非数值转换为数值</code></p><ol><li><p>Number()</p></li><li><p>parseInt()</p></li><li><p>parseFloat()</p></li><li><p>String类型：String（字符串）数据类型表示零或多个16 位Unicode 字符序列。字符串可以使用双引号（&quot;）、单引号（&#39;）或反引号（\`）标示。</p><ol><li><p>字符字面量：用于表示非打印字符或有其他用途的字符</p></li><li><p>字符串的特点：不可变</p></li><li><p>转换为字符串：</p></li></ol></li></ol><ul><li><p>toString()方法可见于数值、布尔值、对象和字符串值。</p></li><li><p>String()转型函数，它始终会返回表示相应类型值的字符串。</p><ol start="4"><li>模板字面量：</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>字符串插值</code></p></li><li><p><code>模板字面量标签函数</code></p></li><li><p>原始字符串：获取原始的模板字面量内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\u00A9</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\u00A9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\u00A9</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ©</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>Symbol类型：符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</p><ol><li>符号的基本用法：使用Symbol()函数初始化</li><li>使用全局符号注册表</li><li>使用符号作为属性</li><li>常用的内置符号</li><li><code>Symbol.asyncIterator等等</code></li></ol></li><li><p>Object类型：ECMAScript的对象其实就是一组数据和功能的集合</p><figure><img src="`+d+`" alt="image-20210218164645465" tabindex="0" loading="lazy"><figcaption>image-20210218164645465</figcaption></figure></li></ol><h6 id="_5-操作符" tabindex="-1"><a class="header-anchor" href="#_5-操作符" aria-hidden="true">#</a> 5. 操作符</h6><pre><code>1. 一元操作符
2. 位操作符
3. 布尔操作符
4. 乘性操作符
5. 指数操作符
6. 加性操作符
7. 关系操作符
8. 相等操作符
9. 条件操作符
10. 赋值操作符
11. 逗号操作符
</code></pre><h6 id="_6-语句" tabindex="-1"><a class="header-anchor" href="#_6-语句" aria-hidden="true">#</a> 6. 语句</h6><p>也称为<code>流控制语句</code></p><pre><code>1. \`if语句\`
2. \`do-while语句\`
3. \`while语句\`
4. \`for语句\`
</code></pre><figure><img src="`+k+`" alt="image-20210218170936604" tabindex="0" loading="lazy"><figcaption>image-20210218170936604</figcaption></figure><ol start="5"><li><p><code>for-in语句</code>：是一种严格的迭代语句，用于枚举对象中的非符号键属性</p></li><li><p><code>for-of语句</code>：是一种严格的迭代语句，用于遍历可迭代对象的属性</p></li><li><p><code>标签语句</code></p></li><li><p><code>break和continue语句</code></p></li><li><p><code>with语句</code>：用途是将代码作用域设置为特定的对象</p></li><li><p><code>switch语句</code>：<code>首先，switch语句可以用于所有数据类型，因此可以使用字符串甚至对象。其次，条件的值不需要是常量，也可以是变量或表达式。</code></p></li></ol><h6 id="_7-函数" tabindex="-1"><a class="header-anchor" href="#_7-函数" aria-hidden="true">#</a> 7. 函数</h6><h1 id="_4-变量、作用域与内存" tabindex="-1"><a class="header-anchor" href="#_4-变量、作用域与内存" aria-hidden="true">#</a> 4. 变量、作用域与内存</h1><h6 id="_1-原始值与引用值" tabindex="-1"><a class="header-anchor" href="#_1-原始值与引用值" aria-hidden="true">#</a> 1. 原始值与引用值</h6><p>​ 原始值是最简单的数据，引用值是由多个值构成的对象。</p><p>​ 保存原始值的变量是按值访问的。</p><p>​ 保存引用值的变量是按引用访问的。</p><ol><li><p>动态属性</p></li><li><p>复制值</p></li><li><p>传递参数</p></li><li><p>确定类型 instanceof</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变量person 是Object 吗？</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变量colors 是Array 吗？</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变量pattern 是RegExp 吗？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h6 id="_2-执行上下文与作用域" tabindex="-1"><a class="header-anchor" href="#_2-执行上下文与作用域" aria-hidden="true">#</a> 2. 执行上下文与作用域</h6><ul><li><code>变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。</code></li><li>每个上下文都有一个关联的变量对象，而这个上下文中定义的所有变量和函数都存在于这个对象上。</li><li>全局上下文是最外层的上下文。在浏览器中，全局上下文是window对象。 <ol><li>作用域链增强</li><li>变量声明 <ol><li>使用var的函数作用域声明：变量会被自动添加到最接近的上下文。</li><li>使用let的块级作用域声明</li><li>使用const的常量声明</li><li>标识符查找</li></ol></li></ol></li></ul><h6 id="_3-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_3-垃圾回收" aria-hidden="true">#</a> 3. 垃圾回收</h6><p><code>JavaScript是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。</code></p><p>垃圾回收程序必须跟踪记录哪个变量还会使用，以及哪个变量不会使用，以便回收内存。</p><p>浏览器发展史上，用到过两种主要的标记策略：标记清理和引用计数。</p><pre><code>1. 标记清理

2. 引用计数

3. 性能
</code></pre><ol start="4"><li><p>内存管理</p><pre><code>1. 通过const和let声明提升性能
  	2. 隐藏类和删除操作
  	3. 内存泄露
  	4. 静态分配与对象池
</code></pre></li></ol><p>​</p><h1 id="_5-基本引用类型" tabindex="-1"><a class="header-anchor" href="#_5-基本引用类型" aria-hidden="true">#</a> 5. 基本引用类型</h1><p><code>引用值是某个特定引用类型的实例。</code></p><p><code>在ECMAScript中，引用类型是把数据和功能组织到一起的结构</code></p><h6 id="_1-date" tabindex="-1"><a class="header-anchor" href="#_1-date" aria-hidden="true">#</a> 1. Date</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 1. 继承的方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2019</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">AM</span>
<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> Thu Feb <span class="token number">1</span> <span class="token number">2019</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span><span class="token operator">-</span><span class="token number">0800</span> <span class="token punctuation">(</span>Pacific Standard Time<span class="token punctuation">)</span>

<span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Date 类型的valueOf()方法根本就不返回字符串，这个方法被重写后返回的是日期的毫秒表示。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&lt;</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&gt;</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>2. 日期格式化方法
</code></pre><figure><img src="`+h+`" alt="image-20210219172015433" tabindex="0" loading="lazy"><figcaption>image-20210219172015433</figcaption></figure><pre><code>3. 日期/时间组件方法
</code></pre><figure><img src="`+v+'" alt="image-20210219172214512" tabindex="0" loading="lazy"><figcaption>image-20210219172214512</figcaption></figure><figure><img src="'+m+`" alt="image-20210219172242800" tabindex="0" loading="lazy"><figcaption>image-20210219172242800</figcaption></figure><h6 id="_2-regexp" tabindex="-1"><a class="header-anchor" href="#_2-regexp" aria-hidden="true">#</a> 2. RegExp</h6><p><code>正则表达式</code></p><pre><code>1. RegExp实例属性
2. RegExp实例方法
3. RegExp构造函数属性
4. 模式局限
</code></pre><h6 id="_3-原始值包装类型" tabindex="-1"><a class="header-anchor" href="#_3-原始值包装类型" aria-hidden="true">#</a> 3. 原始值包装类型</h6><p><code>ECMAScript提供了3种特殊的引用类型：Boolean、Number和String</code></p><p><code>每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露原始值的各种方法。</code></p><p>访问s1时，是以读模式访问的，也就是要从内存中读取变量保存的值。在以读模式访问字符串值的任何时候，后天都会执行以下3步：</p><pre><code>- 1. 创建一个String类型的实例
</code></pre><ul><li><ol start="2"><li>调用实例上的特定方法</li></ol></li><li><ol start="3"><li>销毁实例</li></ol></li></ul><p><code>转型函数和构造函数并不一样，转型函数返回的是要转的类型，构造函数返回的是对象类型</code></p><p>3个用于将数值格式化为字符串的方法：</p><pre><code>- toFixed()方法返回包含指定小数点位数的数值字符串。
</code></pre><ul><li>toExponential()，返回以科学记数法（也称为指数记数法）表<br> 示的数值字符串。接收一个参数，表示结果中小数的位数。</li><li>toPrecision()方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法<br> 形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。</li></ul><p>ES6 新增了Number.isInteger()方法，用于辨别一个数值是否保存为整数。</p><p>String:</p><ol><li><p>JavaScript字符：</p><p><code>JavaScript 字符串由16 位码元（code unit）组成。对多数字符来说，每16位码元对应一个字符.</code></p><pre><code>1. length 属性表示字符串包含多少16 位码元
2. charAt()方法返回给定索引位置的字符
3. charCodeAt()方法可以查看指定码元的字符编码
4. fromCharCode()方法用于根据给定的UTF-16 码元创建字符串中的字符
</code></pre></li><li><p>normalize()方法 <code>?</code></p></li><li><p>字符串操作方法：</p><pre><code>1. concat()，用于将一个或多个字符串拼接成一个新字符串。
  	2. 3个从字符串中提取子字符串的方法：slice()、substr()和substring()。
</code></pre></li><li><p>字符串位置方法：</p><pre><code>1. indexOf()方法从字符串开头开始查找子字符串
  	2. lastIndexOf()方法从字符串末尾开始查找子字符串
</code></pre></li><li><p>字符串包含方法</p><pre><code>1. 3 个用于判断字符串中是否包含另一个字符串的方法：startsWith()、
  	endsWith()和includes()。
</code></pre></li><li><p>trim()方法：这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。</p><pre><code>1. trimLeft()和trimRight()方法分别用于从字符串开始和末尾清理空格符。
</code></pre></li><li><p>repeat()方法：这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。</p></li><li><p>padStart()和padEnd()方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot; foo&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;......foo&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;foo &quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;foo......&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串迭代与解构：字符串的原型上暴露了一个@@iterator 方法，表示可以迭代字符串的每个字符。</p></li><li><p>字符串大小写转换</p></li><li><p>字符串模式匹配方法：</p><ol><li>match()方法</li><li>search()方法</li><li>replace()方法</li><li>split()方法</li></ol></li><li><p>localeCompare()方法：</p><p>这个方法比较两个字符串，返回如下3 个值中的一个。</p><ul><li>如果按照字母表顺序，字符串应该排在字符串参数前头，则返回负值。（通常是-1，具体还要看与实际值相关的实现。）</li><li>如果字符串与字符串参数相等，则返回0。</li><li>如果按照字母表顺序，字符串应该排在字符串参数后头，则返回正值。（通常是1，具体还要看与实际值相关的实现。）</li></ul></li><li><p>HTML方法</p></li></ol><h6 id="_4-单例内置对象" tabindex="-1"><a class="header-anchor" href="#_4-单例内置对象" aria-hidden="true">#</a> 4. 单例内置对象</h6><p><em><strong>任何由ECMAScript 实现提供、与宿主环境无关，并在ECMAScript程序开始执行时就存在的对象</strong></em></p><ol><li>Global <ol><li>URL编码方法</li><li>eval()方法</li><li>Global对象属性</li></ol></li></ol><figure><img src="`+b+'" alt="image-20210220171825190" tabindex="0" loading="lazy"><figcaption>image-20210220171825190</figcaption></figure><figure><img src="'+g+`" alt="image-20210220171843983" tabindex="0" loading="lazy"><figcaption>image-20210220171843983</figcaption></figure><ol start="4"><li><p>window对象</p><p>虽然ECMA-262 没有规定直接访问Global 对象的方式，但浏览器将window 对象实现为Global<br> 对象的代理。因此，所有全局作用域中声明的变量和函数都变成了window 的属性。</p><p><code>or</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">global</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

这段代码创建一个立即调用的函数表达式，返回了<span class="token keyword">this</span> 的值。如前所述，当一个函数在没有明确
<span class="token function">（通过成为某个对象的方法，或者通过call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span>）指定<span class="token keyword">this</span> 值的情况下执行时，<span class="token keyword">this</span> 值等于
Global 对象。因此，调用一个简单返回<span class="token keyword">this</span> 的函数是在任何执行上下文中获取Global 对象的通用
方式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Math:ECMAScript 提供了Math 对象作为保存数学公式、信息和计算的地方。</p><ol><li><p>Math对象属性</p><figure><img src="`+f+`" alt="image-20210220172311651" tabindex="0" loading="lazy"><figcaption>image-20210220172311651</figcaption></figure><pre><code>2. min()和max()方法

3. 舍入方法

1. Math.ceil()方法始终向上舍入为最接近的整数。
2. Math.floor()方法始终向下舍入为最接近的整数。
3. Math.round()方法执行四舍五入。
4. Math.fround()方法返回数值最接近的单精度（32 位）浮点值表示。

4. random()方法：Math.random()方法返回一个0~1 范围内的随机数，其中包含0 但不包含1。

5. 其他方法
</code></pre><figure><img src="`+_+`" alt="image-20210220172743281" tabindex="0" loading="lazy"><figcaption>image-20210220172743281</figcaption></figure></li></ol></li></ol><h1 id="_6-集合引用类型" tabindex="-1"><a class="header-anchor" href="#_6-集合引用类型" aria-hidden="true">#</a> 6. 集合引用类型</h1><h6 id="_1-object" tabindex="-1"><a class="header-anchor" href="#_1-object" aria-hidden="true">#</a> 1. Object</h6><p>创建实例的两种方式：</p><pre><code>- 使用new操作符和Object构造函数
- 使用对象字面量表示法。 {}
</code></pre><p>对象属性的存取：</p><pre><code>- 点语法
</code></pre><ul><li>中括号：<br> - 使用中括号时，要在括号内使用属性名的字符串形式<br> - 使用中括号时，可以使用变量访问属性<br> - 不能使用点语法访问时，使用中括号</li></ul><h6 id="_2-array" tabindex="-1"><a class="header-anchor" href="#_2-array" aria-hidden="true">#</a> 2. Array</h6><ol><li><p>创建数组</p><ol><li>new</li><li>数组字面量</li></ol><p>创建数组的静态方法：</p><pre><code> - Array.from() 用于将类数组结构转换为数组实例
 - Array.of() 用于将一组参数转换为数组实例
</code></pre></li><li><p>数组空位</p><p>避免使用空位，可显式地用undefined值代替</p></li><li><p>数组索引</p><p>使用length向数组末尾添加元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>colors<span class="token punctuation">[</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>检测数组</p><p>Array.isArray()</p></li><li><p>迭代器方法</p><ul><li><p>keys()返回数组索引的迭代器</p></li><li><p>values()返回数组元素的迭代器</p></li><li><p>entries()返回索引/值对的迭代器</p></li></ul><p><code>使用ES6的解构可以非常容易地在循环中拆分键/值对</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;qux&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>idx<span class="token punctuation">,</span> element<span class="token punctuation">]</span> <span class="token keyword">of</span> a<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>复制和填充方法</p><ol><li>批量复制方法copyWithin() 会按照指定范围复制数组中的部分内容</li><li>填充数组方法fill() 向一个已有数组中插入全部或部分相同的值</li></ol></li><li><p>转换方法</p><p>所有对象都有toLocaleString(),toString()和valueOf()方法</p></li><li><p>栈方法</p><p>使用pop()和push()，可以把数组当成队列来使用</p></li><li><p>队列方法</p><p>使用shift()和push()，可以把数组当成队列来使用</p><p>unshift()：在数组开头添加任意多个值</p></li><li><p>排序方法</p><p>reverse()</p><p>sort() 可以接受一个自定义的比较函数</p></li><li><p>操作方法</p><ol><li>concat（） 末尾加</li><li>splice() 插入： <ol><li><strong>删除</strong> splice(要删除的第一个元素的位置, 要删除的元素数量)</li><li><strong>插入</strong> splice(开始位置，要删除的元素数量0，要插入的元素)</li><li><strong>替换</strong> splice(开始位置，要删除的元素数量，要插入的元素)</li></ol></li></ol></li><li><p>搜索和位置方法</p><ol><li><p>按严格相等搜索</p><p>indexOf() lastIndexOf() includes()</p></li><li><p>按断言函数搜索</p><p>断言函数接收3 个参数：元素、索引和数组本身</p><p>find()和findIndex()方法使用了断言函数。这两个方法都从数组的最小索引开始。find()返回第一个匹配的元素，findIndex()返回第一个匹配元素的索引。</p></li></ol></li><li><p>迭代方法</p><p>5个迭代方法，每个方法接受两个参数：以每一项为参数运行的函数，以及可选的作为函数运行上下文的作用域对象（影响函数中this的值）。传给每个方法的函数接受3个参数：数组元素、元素索引和数组本身。</p><p> every()：对数组每一项都运行传入的函数，如果对每一项函数都返回true，则这个方法返回true。<br>  filter()：对数组每一项都运行传入的函数，函数返回true 的项会组成数组之后返回。<br>  forEach()：对数组每一项都运行传入的函数，没有返回值。<br>  map()：对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。<br>  some()：对数组每一项都运行传入的函数，如果有一项函数返回true，则这个方法返回true。</p></li><li><p>归并函数</p><p>reduce()和reduceRight()</p></li></ol><h6 id="_3-定型数组" tabindex="-1"><a class="header-anchor" href="#_3-定型数组" aria-hidden="true">#</a> 3. 定型数组</h6><p>​ <code>目的是提升向原生库传输数据的效率</code></p><p>​ <code>? 已了解，遇到了再回来看</code></p><h6 id="_4-map" tabindex="-1"><a class="header-anchor" href="#_4-map" aria-hidden="true">#</a> 4. Map</h6><p>​ 对性能要求较高使用Map</p><pre><code>- new Map()
- get()
- has()
- delete()
- clear()
</code></pre><h6 id="_5-weakmap" tabindex="-1"><a class="header-anchor" href="#_5-weakmap" aria-hidden="true">#</a> 5. WeakMap</h6><p><code>弱映射，已了解，遇到了再回来看</code></p><h6 id="_6-set" tabindex="-1"><a class="header-anchor" href="#_6-set" aria-hidden="true">#</a> 6. Set</h6><ol><li><p>基本API</p><pre><code>1. new Set()
  	2. add()
  	3. has()
  	4. size
  	5. delete() clear()
</code></pre></li><li><p>顺序与迭代</p><p>keys() values() entries()</p><ol start="3"><li>定义正式集合操作</li></ol></li></ol><h6 id="_7-weakset" tabindex="-1"><a class="header-anchor" href="#_7-weakset" aria-hidden="true">#</a> 7. WeakSet</h6><p>​ <code>weak 描述的是JavaScript垃圾回收程序对待“弱集合”中值的方式</code></p><h6 id="_8-迭代与扩展操作" tabindex="-1"><a class="header-anchor" href="#_8-迭代与扩展操作" aria-hidden="true">#</a> 8. 迭代与扩展操作</h6><p>有4 种原生集合类型定义了默认迭代器：</p><p> Array<br>  所有定型数组<br>  Map<br>  Set</p><p><code>扩展操作符</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1 <span class="token operator">===</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_7-迭代器和生成器" tabindex="-1"><a class="header-anchor" href="#_7-迭代器和生成器" aria-hidden="true">#</a> 7. 迭代器和生成器</h1><p>在软件开发领域，“迭代”的意思是按照顺序反复多次执行一段程序，通常会有明确的终止条件。<em><code>?</code></em></p><h6 id="_1-理解迭代" tabindex="-1"><a class="header-anchor" href="#_1-理解迭代" aria-hidden="true">#</a> 1. 理解迭代</h6><h6 id="_2-迭代器模式" tabindex="-1"><a class="header-anchor" href="#_2-迭代器模式" aria-hidden="true">#</a> 2. 迭代器模式</h6><h6 id="_3-生成器" tabindex="-1"><a class="header-anchor" href="#_3-生成器" aria-hidden="true">#</a> 3. 生成器</h6><h1 id="_8-对象、类与面向对象编程" tabindex="-1"><a class="header-anchor" href="#_8-对象、类与面向对象编程" aria-hidden="true">#</a> 8. 对象、类与面向对象编程</h1><h6 id="_1-理解对象" tabindex="-1"><a class="header-anchor" href="#_1-理解对象" aria-hidden="true">#</a> 1. 理解对象</h6>`,128),w=a(`<li><p>属性的类型</p><p>内部特性描述属性的特征，标识为[[内部属性]]，JavaScript不能直接访问</p><ol><li><p>数据属性：包含一个保存数据值的位置。值从这个位置读写。有4个特性。</p></li><li><p>访问器属性：包含一个获取函数和一个设置函数。获取函数返回一个有效值；设置函数传入新值，决定对数据做出什么修改。有4个特性。</p><p><code>访问器典型的使用场景是，设置一个属性值导致一些其他变化发生。</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">&quot;year&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// book是对象，year是属性</span>
    <span class="token comment">//特性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>year_中的下划线常用来表示该属性并不希望在对象方法的外部被访问。即表示私有属性</code></p></li></ol></li><li><p>定义多个属性</p><p>Object.defineProperties()方法：通过多个描述符一次性定义多个属性。接收两个参数：要为之添加或修改属性的对象和另一个描述符对象。</p></li><li><p>读取属性的特性</p><p>Object.getOwnPropertyDescriptor()</p></li><li><p>合并对象</p><p>Object.assign()：</p><pre><code> - 接受一个目标对象和一个或多个源对象作为参数。
 - \`对每个源对象执行浅复制，浅复制意味着只会复制对象的引用\`
</code></pre></li>`,4),j=n("p",null,"对象标识及相等判定",-1),S={href:"http://Object.is",target:"_blank",rel:"noopener noreferrer"},O=a(`<li><p>增强的对象语法</p><p>ECMAScript6为定义和操作对象新增了很多极其有用的语法糖特性</p><ol><li><p>属性值简写：只要使用 变量名（不再写冒号）就会自动被解释为同名的属性值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;matt&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> name
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可计算属性</p><p>有了可计算属性，就可以在对象字面量中完成动态属性赋值。</p><p>中括号包围的对象属性键告诉运行时将其作为JavaScript表达式而不是字符串来求值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> nameKey <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ageKey <span class="token operator">=</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jobKey <span class="token operator">=</span> <span class="token string">&#39;job&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>nameKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>ageKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>jobKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;Software engineer&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>简写方法名</p><p>对象定义方法时简写:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 与可计算属性键相互兼容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>与可计算属性键相互兼容</code></p></li></ol></li><li><p>对象解构</p><ul><li>可以在一条语句中使用嵌套数据实现一个或多个赋值操作。</li><li>简单地说，对象解构就是使用与对象匹配的结构来实现对象属性赋值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">27</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">&#39;Software engineer&#39;</span><span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Matt</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Software engineer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>注意:</code>null和undefined 不能被解构，否则会抛出错误。</p><ol><li>嵌套解构</li><li>部分解构</li><li>参数上下文匹配</li></ol></li>`,2),A=a(`<h6 id="_2-创建对象" tabindex="-1"><a class="header-anchor" href="#_2-创建对象" aria-hidden="true">#</a> 2. 创建对象</h6><ol><li><p>概述</p><p>ES5，巧妙地运用原型式继承模拟类的继承</p><p>ES6，开始正式支持类和继承，实现封装了ES5构造函数加原型继承的语法糖</p></li><li><p>工厂模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>
    o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> o<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>这种工厂模式随然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）</code></p></li><li><p>构造函数模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">&#39;j1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Greg&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">&#39;j2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Nicholas</span>
person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Greg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>new 调用构造函数会执行如下操作：</code></p><pre><code> 	1. 在内存中创建一个新对象
 	2. 这个新对象内部的[[Prototype]]特性被赋值为构造函数的prototype属性
 	3. 构造函数内部的this被赋值为这个新对象（即this指向新对象）
 	4. 执行构造函数内部的内部（给新对象添加属性）
 	5. 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象
</code></pre><ol><li><p>构造函数也是函数</p><ul><li>构造函数与普通函数的唯一区别是调用方式不同 <code>没明确this值时，this始终指向Global对象（在浏览器中就是window对象）</code></li></ul></li><li><p>构造函数的问题</p><p>其定义的方法会在每个实例上都创建一遍。将函数定义在外部可解决，但却会造成全局作用域的混乱。</p></li></ol></li><li><p>原型模式</p><ul><li><code>每个函数都会创建一个prototype属性，这个属性是一个对象，包含应该由特定引用类型的实例共享的属性和方法</code></li><li><code>这个对象就是通过调用构造函数创建的对象的原型</code></li><li>好处： <ul><li>在它上面定义的属性和方法可以被对象实例共享</li><li>原来在构造函数中直接赋给对象实例的值，可以直接赋值给它们的原型</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Nicholas&quot;</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Nicholas&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>sayName <span class="token operator">==</span> person2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>理解原型</li><li>原型层级</li><li>原型和in操作符</li><li>属性枚举顺序</li></ol></li><li><p>对象迭代</p><p>将对象内容转换为序列化的格式：</p><pre><code> - Oject.values()    接收一个对象，返回对象值的数组
 - Object.entries()    接收一个对象，返回键/值对的数组
</code></pre><ol><li>其他原型语法</li><li>原型的动态性</li><li>原生对象原型</li></ol></li></ol><h6 id="_3-继承" tabindex="-1"><a class="header-anchor" href="#_3-继承" aria-hidden="true">#</a> 3. 继承</h6><ol><li><p>原型链</p><p>每个构造函数都有一个原型对象，原型有一个属性指向构造函数，而实例有一个内部指针指向原型。</p><p>基本思想：通过原型继承多个引用类型的属性和方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 继承SuperType</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>默认原型 Object</p></li><li><p>原型与继承关系 instanceof 和isPrototyprOf()</p></li><li><p>关于方法</p></li><li><p>原型链的问题：引用值存在共享 ，子类型在实例化时不能给父类型的构造函数传参</p></li><li><p>盗用构造函数</p></li></ol><p>基本思路：<code>在子类构造函数中调用父类构造函数</code>使用apply()和call()方法以新创建的对象为上下文执行构造函数。</p></li><li><p>组合继承</p></li><li><p>原型式继承</p></li><li><p>寄生式继承</p></li><li><p>寄生式组合继承</p></li></ol><h6 id="_4-类" tabindex="-1"><a class="header-anchor" href="#_4-类" aria-hidden="true">#</a> 4. 类</h6><ol><li><p>类定义</p><p>类声明和类表达式</p><p>类的构成</p></li><li><p>类构造函数</p><ol><li>实例化</li><li>把类当成特殊函数</li></ol></li><li><p>实例、原型和类成员</p><ol><li>实例成员</li><li>原型方法与访问器</li><li>静态类方法</li><li>非函数原型和类成员</li><li>迭代器与生成器方法</li></ol></li><li><p>继承</p><ol><li><p>继承基础</p></li><li><p>构造函数、HomeObject和super()</p></li><li><p>抽象基类</p></li><li><p>继承内置类型</p></li></ol></li></ol><h1 id="_9-代理与反射" tabindex="-1"><a class="header-anchor" href="#_9-代理与反射" aria-hidden="true">#</a> 9. 代理与反射</h1><ul><li><code>ES6新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力</code></li><li><code>具体来说，可以给目标对象定义一个关联的代理对象，而这个代理对象可以作为抽象的目标对象来使用</code></li><li><code>在对目标对象的各种操作影响目标对象之前，可以在代理对象中对这些操作加以控制</code></li><li>代理是目标对象的抽象</li></ul><h6 id="_1-代理基础" tabindex="-1"><a class="header-anchor" href="#_1-代理基础" aria-hidden="true">#</a> 1. 代理基础</h6><ol><li><p>创建空代理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;target&#39;</span>    
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义捕获器</p><p><code>捕获器是在处理程序对象中定义的“基本操作的拦截器”</code></p><p>每个捕获器都对应一种基本操作，可以直接或间接在代理对象上调用。</p><p><strong>只有在代理对象上调用才会使用捕获器</strong></p></li><li><p>捕获器参数和反射API</p><p>在捕获器中通过反射获取目标的方法，Reflect.get(...)</p></li><li><p>捕获器不变式</p><p>防止捕获器定义出现过于反常的行为</p><p>比如，如果目标对象有一个不可配置且不可写的数据属性，那么在捕获器返回一个与该属性不同的值时，会抛出TypeError</p></li><li><p>可撤销代理</p><p>撤销函数和代理对象是在实例化时同时生成的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> proxy<span class="token punctuation">,</span> revoke <span class="token punctuation">}</span> <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">revocable</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 撤销</span>
<span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实用反射API</p><ol><li>反射API与对象API <ol><li>反射API并不限于捕获处理程序</li><li>大多数反射API方法在Object类型上有对应的方法</li></ol></li><li>状态标记</li><li>用一等函数替代操作符</li><li>安全地应用函数</li></ol></li><li><p>代理另一个代理</p></li><li><p>代理的问题与不足</p><ol><li>代理中的this</li><li>代理与内部槽位</li></ol></li></ol><h6 id="_2-代理捕获器与反射方法" tabindex="-1"><a class="header-anchor" href="#_2-代理捕获器与反射方法" aria-hidden="true">#</a> 2. 代理捕获器与反射方法</h6><p>​ 代理可以捕获13种不同的基本操作</p><p>​ 几种不同的JavaScript操作会调用同一个捕获器处理程序</p><p>​ 对于代理对象上执行的任何一种操作，只会有一个捕获处理程序被调用</p><ol><li><p>get()捕获器会在获取属性值的操作种被调用，对应的反射API方法为Reflect.get()</p><ol><li><p>返回值</p><p>返回值无限制</p></li><li><p>拦截的操作</p><ul><li>proxy.property</li><li>proxy[property]</li><li>Object.create(proxy)[property]</li><li>Reflect.get(proxy,property,receiver)</li></ul></li><li><p>捕获器处理程序参数</p><ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li><li>receiver：代理对象或继承代理对象的对象</li></ul></li><li><p>捕获器不变式</p></li><li><p>set()捕获器会在设置属性值的操作中被调用。对应的放射API方法为Reflect.set()</p></li><li><p>has()捕获器会在in操作符中被调用。对应的反射API方法为Reflect.has()</p></li><li><p>defineProperty()捕获器会在Object.defineProperty()中被调用。对应的反射API方法为Reflect.defineProperty()</p></li><li><p>getOwnPropertyDesciptor()捕获器会在Object.getOwnPropertyDesciptor()中被调用。对应的反射API方法为Reflect.getOwnPropertyDesciptor()</p></li><li><p>deleteProperty()捕获器会在delete 操作符中被调用。对应的反射API 方法为Reflect.deleteProperty()。</p></li><li><p>ownKeys()捕获器会在Object.keys()及类似方法中被调用。对应的反射API 方法为Reflect.ownKeys()。</p></li><li><p>getPrototypeOf()捕获器会在Object.getPrototypeOf()中被调用。对应的反射API 方法为Reflect.getPrototypeOf()</p></li><li><p>setPrototypeOf()捕获器会在Object.setPrototypeOf()中被调用。对应的反射API 方法为Reflect.setPrototypeOf()。</p></li><li><p>isExtensible()捕获器会在Object.isExtensible()中被调用。对应的反射API 方法为Reflect.isExtensible()。</p></li><li><p>preventExtensions()捕获器会在Object.preventExtensions()中被调用。对应的反射API方法为Reflect.preventExtensions()。</p></li><li><p>apply()捕获器会在调用函数时中被调用。对应的反射API 方法为Reflect.apply()。</p></li><li><p>construct()捕获器会在new 操作符中被调用。对应的反射API 方法为Reflect.construct()。</p></li></ol></li></ol><h6 id="_3-代理模式" tabindex="-1"><a class="header-anchor" href="#_3-代理模式" aria-hidden="true">#</a> 3. 代理模式</h6><p>​ 使用代理可以在代码中实现一些有用的编程模式</p><ol><li><p>跟踪属性访问</p><p>通过捕获get、set 和has 等操作，可以知道对象属性什么时候被访问、被查询。</p></li><li><p>隐藏属性</p><p>代理的内部实现对外部代码是不可见的，因此要隐藏目标对象上的属性也轻而易举</p></li><li><p>属性验证</p><p>可以根据所赋的值决定是允许还是拒绝赋值</p></li><li><p>函数与构造函数参数验证</p><p>跟保护和验证对象属性类似，也可对函数和构造函数参数进行审查。</p></li><li><p>数据绑定与可观察对象</p><p>通过代理可以把运行时中原本不相关的部分联系到一起。这样就可以实现各种模式，从而让不同的代码互操作。</p></li></ol><h1 id="_10-函数" tabindex="-1"><a class="header-anchor" href="#_10-函数" aria-hidden="true">#</a> 10. 函数</h1><h6 id="_1-箭头函数" tabindex="-1"><a class="header-anchor" href="#_1-箭头函数" aria-hidden="true">#</a> 1.箭头函数</h6><p>​ 箭头函数不能使用arguments、super和new.target，也不能作为构造函数。此外，箭头函数也没有prototype属性。</p><h6 id="_2-函数名" tabindex="-1"><a class="header-anchor" href="#_2-函数名" aria-hidden="true">#</a> 2. 函数名</h6><p>​ 因为函数名就是指向函数的指针，所以它们跟其他包含对象指针的变量具有相同的行为。这意味着一个函数可以有多个名称。</p><h6 id="_3-理解参数" tabindex="-1"><a class="header-anchor" href="#_3-理解参数" aria-hidden="true">#</a> 3. 理解参数</h6><p>​ ES函数的参数在内部表现为一个数组。</p><p>​ 可使用arguments[i]获取参数值。arguments对象是一个类数组对象。</p><p>​ <code>箭头函数不能使用arguments访问，但是可以在包装函数中把它提供给箭头函数</code></p><h6 id="_4-没有重载" tabindex="-1"><a class="header-anchor" href="#_4-没有重载" aria-hidden="true">#</a> 4. 没有重载</h6><p>​ 参数是数组，没有函数签名，没有重载</p><h6 id="_5-默认参数值" tabindex="-1"><a class="header-anchor" href="#_5-默认参数值" aria-hidden="true">#</a> 5. 默认参数值</h6><p>​ 在函数定义的参数后面用=为参数赋一个默认值</p><h6 id="_6-参数的扩展与收集" tabindex="-1"><a class="header-anchor" href="#_6-参数的扩展与收集" aria-hidden="true">#</a> 6. 参数的扩展与收集</h6><p>​ es6新增扩展操作符，可以非常简洁地操作和组合集合数据。</p><pre><code>1. 扩展参数
2. 收集参数
</code></pre><h6 id="_7-函数声明与函数表达式" tabindex="-1"><a class="header-anchor" href="#_7-函数声明与函数表达式" aria-hidden="true">#</a> 7. 函数声明与函数表达式</h6><h6 id="_8-函数作为值" tabindex="-1"><a class="header-anchor" href="#_8-函数作为值" aria-hidden="true">#</a> 8. 函数作为值</h6><h6 id="_9-函数内部" tabindex="-1"><a class="header-anchor" href="#_9-函数内部" aria-hidden="true">#</a> 9. 函数内部</h6><p>函数内部存在2个特殊的对象：arguments、this</p><p>​ 1个特殊属性：new.target</p><ol><li><p>arguments</p><p>arguments.callee 指向arguments对象所在函数的指针</p></li><li><p>this</p><p>在标准函数中，this引用的是把函数当成方法调用的上下文对象，这时候通常称其为this值（在网页的全局上下文中调用函数时，this指向windows）</p><p>在箭头函数中，this引用的是定义箭头函数的上下文</p></li><li><p>caller</p><p>这个属性引用的是调用当前函数的函数，或者如果是在全局作用域中调用的则为null</p></li><li><p>new.target</p><p>检测函数是否使用new关键字调用的new.target属性</p></li></ol><h6 id="_10-函数属性与方法" tabindex="-1"><a class="header-anchor" href="#_10-函数属性与方法" aria-hidden="true">#</a> 10. 函数属性与方法</h6><h1 id="_11-期约与异步函数" tabindex="-1"><a class="header-anchor" href="#_11-期约与异步函数" aria-hidden="true">#</a> 11. 期约与异步函数</h1><h1 id="_12-bom" tabindex="-1"><a class="header-anchor" href="#_12-bom" aria-hidden="true">#</a> 12. BOM</h1><h1 id="_13-客户端检测" tabindex="-1"><a class="header-anchor" href="#_13-客户端检测" aria-hidden="true">#</a> 13. 客户端检测</h1><h1 id="_14-dom" tabindex="-1"><a class="header-anchor" href="#_14-dom" aria-hidden="true">#</a> 14. DOM</h1><h1 id="_15-dom扩展" tabindex="-1"><a class="header-anchor" href="#_15-dom扩展" aria-hidden="true">#</a> 15. DOM扩展</h1><h1 id="_16-dom2和dom3" tabindex="-1"><a class="header-anchor" href="#_16-dom2和dom3" aria-hidden="true">#</a> 16. DOM2和DOM3</h1><h1 id="_17-事件" tabindex="-1"><a class="header-anchor" href="#_17-事件" aria-hidden="true">#</a> 17. 事件</h1><h1 id="_18-动画与canvas图形" tabindex="-1"><a class="header-anchor" href="#_18-动画与canvas图形" aria-hidden="true">#</a> 18. 动画与Canvas图形</h1><h1 id="_19-表单脚本" tabindex="-1"><a class="header-anchor" href="#_19-表单脚本" aria-hidden="true">#</a> 19. 表单脚本</h1><h1 id="_20-javascript-api" tabindex="-1"><a class="header-anchor" href="#_20-javascript-api" aria-hidden="true">#</a> 20. JavaScript API</h1><h1 id="_21-错误处理与调试" tabindex="-1"><a class="header-anchor" href="#_21-错误处理与调试" aria-hidden="true">#</a> 21. 错误处理与调试</h1><h1 id="_22-处理xml" tabindex="-1"><a class="header-anchor" href="#_22-处理xml" aria-hidden="true">#</a> 22. 处理XML</h1><h1 id="_23-json" tabindex="-1"><a class="header-anchor" href="#_23-json" aria-hidden="true">#</a> 23. JSON</h1><h1 id="_24-网络请求与远程资源" tabindex="-1"><a class="header-anchor" href="#_24-网络请求与远程资源" aria-hidden="true">#</a> 24. 网络请求与远程资源</h1><h1 id="_25-客户端存储" tabindex="-1"><a class="header-anchor" href="#_25-客户端存储" aria-hidden="true">#</a> 25. 客户端存储</h1><h1 id="_26-模块" tabindex="-1"><a class="header-anchor" href="#_26-模块" aria-hidden="true">#</a> 26. 模块</h1><h1 id="_27-工作者线程" tabindex="-1"><a class="header-anchor" href="#_27-工作者线程" aria-hidden="true">#</a> 27. 工作者线程</h1><h1 id="_28-最佳实践" tabindex="-1"><a class="header-anchor" href="#_28-最佳实践" aria-hidden="true">#</a> 28. 最佳实践</h1>`,59);function P(M,E){const e=t("ExternalLinkIcon");return i(),o("div",null,[x,n("ol",null,[w,n("li",null,[j,n("p",null,[s("​ "),n("a",S,[s("Object.is"),l(e)]),s("()")])]),O]),A])}const T=p(y,[["render",P],["__file","JavaScript高级程序设计学习笔记.html.vue"]]);export{T as default};
