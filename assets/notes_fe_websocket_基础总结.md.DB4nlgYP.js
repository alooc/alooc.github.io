import{_ as n,c as a,o as p,ag as t}from"./chunks/framework.DPDPlp3K.js";const b=JSON.parse('{"title":"websocket笔记","description":"","frontmatter":{"title":"websocket笔记","date":"2020-01-01T09:02:55.000Z","categories":["前端技术","websocket"],"tags":["websocket"]},"headers":[],"relativePath":"notes/fe/websocket/基础总结.md","filePath":"notes/fe/websocket/基础总结.md"}'),e={name:"notes/fe/websocket/基础总结.md"};function l(c,s,i,o,r,d){return p(),a("div",null,s[0]||(s[0]=[t(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1.websocket是什么：</span></span>
<span class="line"><span>	websocket 基于TCP的一种新的网络协议，全双工  允许服务器主动向客户端发送消息</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	具体原理是什么：</span></span>
<span class="line"><span>		浏览器发送websocket连线请求，服务器回应。只需一次握手，就可建立一条快速通道，进行数据传输</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.原生websocket的使用</span></span>
<span class="line"><span>	1.引入依赖</span></span>
<span class="line"><span>		&lt;dependency&gt;</span></span>
<span class="line"><span>		    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>		    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span></span>
<span class="line"><span>		&lt;/dependency&gt;</span></span>
<span class="line"><span>	2.配置类</span></span>
<span class="line"><span>		springboot使用配置类开启终端，前端可以借此连接服务器</span></span>
<span class="line"><span>	3.编写websocketServer的具体实现类</span></span>
<span class="line"><span>		该类处理使用websocket时的连接关闭和消息处理</span></span>
<span class="line"><span>	4.前端调用</span></span>
<span class="line"><span>		通过controller调用websocketServer的具体实现类的方法</span></span>
<span class="line"><span>		前端可以使用WebSocket的API</span></span>
<span class="line"><span>3.sockjs + stomp的使用</span></span>
<span class="line"><span>	比原生的好用</span></span>
<span class="line"><span>	1.引入依赖</span></span>
<span class="line"><span>		&lt;dependency&gt;</span></span>
<span class="line"><span>		    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>		    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span></span>
<span class="line"><span>		&lt;/dependency&gt;</span></span>
<span class="line"><span>		还要引入sockjs.min.js和stomp.min.js</span></span>
<span class="line"><span>	2.配置类</span></span>
<span class="line"><span>		开启sockjs的终端</span></span>
<span class="line"><span>		配置消息代理，一个是服务端向客户端发送消息的代理，</span></span>
<span class="line"><span>				一个是客户端向服务端发送消息的代理</span></span>
<span class="line"><span>	3.控制器类实现业务</span></span>
<span class="line"><span>		@MessageMapping处理客户端给服务端发送的消息</span></span>
<span class="line"><span>		@SendTo 指定服务端向客户端发送消息</span></span>
<span class="line"><span>	4.前端调用</span></span>
<span class="line"><span>		实现四个方法即可</span></span>
<span class="line"><span>			1.连接，订阅消息</span></span>
<span class="line"><span>			2.断开连接</span></span>
<span class="line"><span>			3.发送消息</span></span>
<span class="line"><span>			4.显示消息</span></span></code></pre></div>`,1)]))}const k=n(e,[["render",l]]);export{b as __pageData,k as default};
