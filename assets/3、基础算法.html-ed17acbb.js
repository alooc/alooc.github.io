import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as r,c as h,d as l,e as d,f as t,b as i}from"./app-6337abed.js";const n={},p=i('<blockquote><p>左神NB</p></blockquote><h1 id="_1-贪心算法" tabindex="-1"><a class="header-anchor" href="#_1-贪心算法" aria-hidden="true">#</a> 1. 贪心算法</h1><ul><li>1、最自然智慧的算法</li><li>2、用一种局部最功利的标准，总是做出在当前看来最好的选择</li><li>3、难点在于证明局部最功利的标准可以得到全局最优解</li><li>4、对于贪心算法的学习主要以增加阅历为主</li></ul><h1 id="_2-暴力递归" tabindex="-1"><a class="header-anchor" href="#_2-暴力递归" aria-hidden="true">#</a> 2. 暴力递归</h1><ul><li>暴力递归就是尝试</li><li>1、把问题转换为规模缩小了的同类问题的子问题</li><li>2、有明确的不需要继续进行递归的条件（base case)</li><li>3、有当得到了子问题的结果之后的决策过程</li><li>4、不记录每一个子问题的解</li></ul><h1 id="_3-动态规划" tabindex="-1"><a class="header-anchor" href="#_3-动态规划" aria-hidden="true">#</a> 3. 动态规划</h1><blockquote><p>从暴力递归到动态规划</p></blockquote><ul><li><p>1、树立常识：</p><ul><li>动态规划是结果，不是原因，动态规划从暴力规划优化而来</li><li>学会尝试是解决动态规划最本质的能力</li></ul></li><li><p>2、技巧：</p><ul><li><p>什么暴力递归可以继续优化？</p><ul><li>有重复调用同一个子问题的解，这种递归可以优化</li></ul></li><li><p>如果每一个子问题都是不同的解，无法优化也不用优化</p></li><li><p>递归优化：分析可变参数的变化范围</p></li><li><p>暴力递归和动态规划的关系：</p><ul><li>某一个暴力递归，有解的重复调用，就可以把这个暴力递归优化成动态规划<br> 任何动态规划问题，都一定对应着某一个有重复过程的暴力递归<br> 但不是所有的暴力递归，都一定对应着动态规划</li></ul></li><li><p>面试题和动态规划的关系</p><ul><li>解决一个问题，可能有很多尝试方法<br> 可能在很多尝试方法中，又有若干个尝试方法有动态规划的方式<br> 一个问题可能有若干种动态规划的解法</li></ul></li><li><p>如何找到某个问题的动态规划方式？</p><ul><li>1）设计暴力递归：重要原则+4种常见尝试模型！重点！</li></ul></li><li><p>2）分析有没有重复解：套路解决</p></li><li><p>3）用记忆化搜索-&gt;用严格表结构实现动态规划：套路解决</p></li><li><p>4）看看能否继续优化：套路解决</p></li><li><p>面试中设计暴力递归过程的原则：<br> 1）每一个可变参数的类型，一定不要比int类型更加复杂<br> 2）原则1)可以违反，让类型突破到一维线性结构，那必须是单一可变参数<br> 3）如果发现原则1)被违反，但不违反原则2),只需要做到记忆化搜索即可<br> 4）可变参数的个数，能少则少</p></li><li><p>知道了面试中设计暴力递归过程的原则，然后呢？</p><ul><li>一定要逼自己找到不违反原则情况下的暴力尝试！<br> 如果你找到的暴力尝试，不符合原则，马上舍弃！找新的！<br> 如果某个题目突破了设计原则，一定极难极难，面试中出现概率低于5%!</li></ul></li></ul></li><li><p>3、模型：</p><ul><li>常见的4种尝试模型 <ol><li>从左往右的尝试模型 从左往右进行可能性分析</li><li>范围上的尝试模型 从L 到R的某个范围上进行分析</li><li>多样本位置全对应的尝试模型 对多样本的最后一个位置进行可能性分析</li><li>寻找业务限制的尝试模型 业务范围分析</li></ol></li><li>如何分析有没有重复解：<br> 列出调用过程，可以只列出前几层<br> 有没有重复解，一看便知</li><li>暴力递归到动态规划的套路： <ol><li>你已经有了一个不违反原则的暴力递归，而且的确存在解的重复调用</li><li>找到哪些参数的变化会影响返回值，对每一个列出变化范围</li><li>参数间的所有的组合数量，意味着表大小</li><li>记忆化搜索的方法就是傻缓存，非常容易得到</li><li>规定好严格表的大小，分析位置的依赖顺序，然后从基础填写到最终解</li><li>对于有枚举行为的决策过程，进一步优化**</li></ol></li><li>动态规划的进一步优化 <ol><li>空间压缩</li><li>状态化简</li><li>四边形不等式</li><li>其他优化技巧</li></ol></li></ul></li></ul><h1 id="_4、算法题" tabindex="-1"><a class="header-anchor" href="#_4、算法题" aria-hidden="true">#</a> 4、算法题</h1><h5 id="_1-位运算" tabindex="-1"><a class="header-anchor" href="#_1-位运算" aria-hidden="true">#</a> 1. 位运算</h5><ul><li>数组元素交换，写法简单</li><li>异或操作，求出现奇数次数的数，使用了异或运算的性质：0 ^ N = N N^N = 0</li><li>其他数出现了m次，只有一种数出现了少于m次。用到了去最右侧的1 a &amp; (~a+1) 和异或运算</li></ul><h5 id="_2-排序" tabindex="-1"><a class="header-anchor" href="#_2-排序" aria-hidden="true">#</a> 2. 排序</h5><ul><li>选择排序、冒泡排序、插入排序</li><li>归并排序</li><li>快速排序</li></ul><h5 id="_3-链表" tabindex="-1"><a class="header-anchor" href="#_3-链表" aria-hidden="true">#</a> 3. 链表：</h5><ul><li>反转链表</li><li>删除链表节点</li><li>返回中点</li><li>判断单链表是否为回文</li><li>单链表划分小于区、等于区、大于区</li><li>两个可能有环链表的相交点</li></ul><h5 id="_4-堆" tabindex="-1"><a class="header-anchor" href="#_4-堆" aria-hidden="true">#</a> 4. 堆</h5><ul><li><p>堆的插入方法 和 堆化方法</p></li><li><ul><li>插入：用于大根堆添加元素，向上调整，调整成大根堆的结构</li><li>堆化：用于大根堆删除元素，向下调整，调整成大根堆的结构</li><li>大根堆的成员变量：</li></ul></li><li><ul><li><ul><li>存储元素的数组： heap</li><li>数组的容量，即当前堆的最大容量： limit</li><li>堆的元素数量：heapSize</li></ul></li></ul></li><li><ul><li>大根堆的成员方法：</li></ul></li><li><ul><li><ul><li>判断是否为空</li><li>判断是否为满</li><li>添加元素</li><li>删除元素</li></ul></li></ul></li><li><p>加强堆</p></li><li><ul><li>普通的堆只能方便的获取第一个元素，删除某个值时，需要遍历对比后才能删除</li><li>需要加强堆：</li></ul></li><li><ul><li><ul><li>反向索引表</li><li>可以根据值删除元素、查找元素</li></ul></li></ul></li><li><ul><li>加强堆的结构，是给堆增加一个反向索引表HashMap&lt;T, Interger&gt; indexMap</li></ul></li><li><ul><li><ul><li>indexMap，以元素的值为键，以元素在数组中的索引为值</li></ul></li></ul></li><li><p>堆排序</p></li><li><ul><li>实现步骤：</li></ul></li><li><ul><li><ul><li>1、把数组从底向上用heapify转换成大根堆</li><li>2、遍历：取第一个最大值与堆的末尾交换，此时交换后的末尾位置就排好序了，然后再调整成大根堆的结构。</li></ul></li></ul></li></ul><h5 id="_5-树" tabindex="-1"><a class="header-anchor" href="#_5-树" aria-hidden="true">#</a> 5. 树</h5><ul><li><p>二叉树前、中、后序遍历</p></li><li><ul><li>折纸问题</li></ul></li><li><p>树的性质</p></li><li><p>树形DP套路</p></li><li><ul><li>判断完全二叉树</li><li>判断平衡二叉树</li><li>判断二叉搜索树</li><li>判断满二叉树</li></ul></li></ul><h5 id="_6-图" tabindex="-1"><a class="header-anchor" href="#_6-图" aria-hidden="true">#</a> 6. 图</h5>',20),o=i("<li><p>图结构、图的转换</p></li><li><ul><li>自己的图结构：</li></ul></li><li><ul><li><ul><li>边：</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>Node from</li><li>Node to</li><li>int Weight</li></ul></li></ul></li></ul></li><li><ul><li><ul><li>点：</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>int value</li><li>int in</li><li>int out</li><li>List<code>&lt;Node&gt;</code> nexts 单向的，下一个相邻节点</li><li>List<code>&lt;Edge&gt;</code> edges 单向的，下一个相邻边</li></ul></li></ul></li></ul></li><li><ul><li><ul><li>生成自己的图结构：</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>组装边集</li><li>组装点集</li></ul></li></ul></li></ul></li><li><p>深度、宽度遍历</p></li><li><ul><li>深度优先搜索：栈结构遍历</li></ul></li><li><ul><li><ul><li>元素入栈时打印</li></ul></li></ul></li><li><ul><li>宽度优先搜索：队列结构遍历</li></ul></li><li><ul><li><ul><li>元素出队时打印</li></ul></li></ul></li><li><p>拓扑排序</p></li><li><ul><li>循环遍历入度为0的点</li></ul></li><li><p>最小生成树算法 k p</p></li>",16),c={href:"https://www.cnblogs.com/biyeymyhjob/archive/2012/07/30/2615542.html",target:"_blank",rel:"noopener noreferrer"},s=l("li",null,"k算法：侧重于边",-1),_=i("<li><ul><li><ul><li>始终找权重最小的边，然后判断该边的两个点是否已经联通了，已联通就不要这个边，未联通就要这个边。</li></ul></li></ul></li><li><ul><li>p算法：侧重于点</li></ul></li><li><ul><li><ul><li>以点为主，找点关联的边中权重最小的。</li></ul></li></ul></li><li><p>最短路径算法</p></li><li><ul><li>贪心算法</li><li>找最短的路径，然后用当前最短的路径去更新未到达的路径中最短的点，直到遍历完所有点。</li></ul></li>",5),b=i('<h5 id="_7-并查集" tabindex="-1"><a class="header-anchor" href="#_7-并查集" aria-hidden="true">#</a> 7. 并查集</h5><ul><li><p>并查集，合并和查询的集合</p></li><li><ul><li>查询：查询两个元素是否属于同一集合</li><li>合并：将两个不同的集合合并成一个，设置新的集合大小，删除合并掉的集合大小</li><li>找父节点：基础方法，设置好路径上所有节点的父节点</li></ul></li></ul><h5 id="_8-滑动窗口" tabindex="-1"><a class="header-anchor" href="#_8-滑动窗口" aria-hidden="true">#</a> 8. 滑动窗口</h5><ul><li><p>想象出来的数据结构，基于双端队列</p></li><li><p>有左右边界，两个边界只能往右走</p></li><li><p>基础使用：</p></li><li><ul><li>使用linkedlist作为窗口</li><li>遍历到数组i位置：</li></ul></li><li><ul><li><ul><li>arr[i] 与窗口右边界的值比较，删除不合规则的窗口值</li><li>i进入窗口</li><li>判断左边界是否已过期，过期了就删除</li><li>当i &gt;= w-1时，窗口填好值了，可以使用左边界来打印需要的结果</li></ul></li></ul></li></ul><h5 id="_9-单调栈" tabindex="-1"><a class="header-anchor" href="#_9-单调栈" aria-hidden="true">#</a> 9. 单调栈</h5><ul><li>想象出来的结构，基于栈</li><li>可以找到比当前位置小的最近的左右两个元素</li><li>栈中元素，从底网上是由小到大</li><li>进栈，比栈顶元素大就压栈</li><li>出栈，比栈顶元素小就弹出栈顶，此时弹出的栈顶元素的左边的小于值是栈顶，右边的小于值是正在判断的元素</li></ul><h5 id="_10-动态规划" tabindex="-1"><a class="header-anchor" href="#_10-动态规划" aria-hidden="true">#</a> 10. 动态规划</h5><ul><li><p>基本解题步骤：暴力递归 =&gt; 动态参数组成严格表结构 =&gt; 组装dp动态数组【一般是二维的】</p></li><li><ul><li>1、写出暴力解法</li><li>2、找出可变参数，作为dp数组</li><li>3、根据暴力解法，填充dp数组</li></ul></li><li><p>常用的套路：</p></li><li><ul><li>1、从左往右尝试模型</li><li>2、范围上的尝试模型</li><li>3、多样本位置全对应的尝试模型</li><li>4、寻找业务限制的尝试模型</li></ul></li></ul><h5 id="_11-字符串处理" tabindex="-1"><a class="header-anchor" href="#_11-字符串处理" aria-hidden="true">#</a> 11. 字符串处理</h5><ul><li>kmp算法</li><li>最长子串</li><li>括号匹配</li></ul>',10);function f(x,m){const u=a("ExternalLinkIcon");return r(),h("div",null,[p,l("ul",null,[o,l("li",null,[l("ul",null,[l("li",null,[l("a",c,[d("最小生成树-Prim算法和Kruskal算法"),t(u)])]),s])]),_]),b])}const N=e(n,[["render",f],["__file","3、基础算法.html.vue"]]);export{N as default};
