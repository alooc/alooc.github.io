import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"docker基础笔记","description":"","frontmatter":{"title":"docker基础笔记","date":"2020-01-01T09:02:55.000Z","categories":["后端技术","docker"],"tags":["docker"]},"headers":[],"relativePath":"notes/be/tech-stack/docker/docker命令.md","filePath":"notes/be/tech-stack/docker/docker命令.md"}'),t={name:"notes/be/tech-stack/docker/docker命令.md"};function n(h,s,p,k,r,o){return e(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p>windows 安装使用</p></blockquote><ol><li><p>安装exe</p></li><li><p>安装wsl,wsl2</p></li></ol><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package" target="_blank" rel="noreferrer">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package</a></p><ol start="3"><li>非系统盘安装linux子系统</li></ol><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual" target="_blank" rel="noreferrer">https://docs.microsoft.com/zh-cn/windows/wsl/install-manual</a></p><ol start="4"><li>镜像加速</li></ol><p>&quot;<a href="https://rvpdnlir.mirror.aliyuncs.com" target="_blank" rel="noreferrer">https://rvpdnlir.mirror.aliyuncs.com</a>&quot;, &quot;<a href="https://hub-mirror.c.163.com" target="_blank" rel="noreferrer">https://hub-mirror.c.163.com</a>&quot;, &quot;<a href="https://mirror.baidubce.com" target="_blank" rel="noreferrer">https://mirror.baidubce.com</a>&quot;</p><blockquote><p>常用命令</p></blockquote><p>docker run --name hello -itd -P my:v1 docker container ls docker container start docker container stop docker container rm test docker stats docker inspect -f docker build -f dw -t dw:v2 . docker exec -it test bash docker images docker image rm</p><p>docker run --name dw1 -P -p 33001:22 -itd dw:v2 &amp;&amp; docker run --name dw2 -P -p 33002:22 -itd dw:v2 &amp;&amp; docker run --name dw3 -P -p 33003:22 -itd dw:v2</p><p>docker container stop dw1 &amp;&amp; docker container rm dw1 &amp;&amp; docker container stop dw2 &amp;&amp; docker container rm dw2 &amp;&amp; docker container stop dw3 &amp;&amp; docker container rm dw3</p><p>docker info docker version docker 命令 --help</p><p>帮助文档</p><p>镜像命令 docker images docker image rm</p><p>搜索镜像 docker search</p><p>docker pull</p><p>docker rmi -f 容器id</p><p>容器命令 新建容器并启动 docker run [] image -d 后台方式运行 -it 交互 -p 指定端口 -P 随机指定端口</p><p>docker ps -a ctrl+ p+ q 退出后不关闭容器 docker rm -rf $(docker ps -aq)</p><p>启动和停止容器 docker start docker stop docker restart docker kill</p><p>常用其他命令 doceker run -d</p><p>日志 docker logs -ft --tail 19 id</p><p>查看容器中进程信息ps docker top id</p><p>查看镜像元数据 docker inspect id</p><p>进入当前正在运行的容器 docker exec -it id bash exec和attach的区别</p><p>从容器内拷贝文件到主机 docker cp id:/home/test.java /home</p><p>-rm 容器停止后就删除</p><blockquote><p>总结</p></blockquote><h1 id="容器数据卷" tabindex="-1">容器数据卷 <a class="header-anchor" href="#容器数据卷" aria-label="Permalink to &quot;容器数据卷&quot;">​</a></h1><h3 id="使用数据卷" tabindex="-1">使用数据卷 <a class="header-anchor" href="#使用数据卷" aria-label="Permalink to &quot;使用数据卷&quot;">​</a></h3><ol><li><p>使用 -v 主机目录:容器内目录</p></li><li><p>示例</p></li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -d 后台运行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -p 端口映射</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -v 卷挂载</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --name 容器名字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3310:3306</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/docker/mysql/conf:/etc/mysql/conf.d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/docker/mysql/data:/var/lib/mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MYSQL_ROOT_PASSWORD=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql01</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span></span></code></pre></div><ol start="3"><li>具名和匿名挂载</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><h6 id="匿名挂载" tabindex="-1">匿名挂载 <a class="header-anchor" href="#匿名挂载" aria-label="Permalink to &quot;匿名挂载&quot;">​</a></h6><p>-v 只写容器内路径</p><h6 id="具名挂载" tabindex="-1">具名挂载 <a class="header-anchor" href="#具名挂载" aria-label="Permalink to &quot;具名挂载&quot;">​</a></h6><p>-v 指定卷名:容器内路径</p><h6 id="查看卷名的路径" tabindex="-1">查看卷名的路径 <a class="header-anchor" href="#查看卷名的路径" aria-label="Permalink to &quot;查看卷名的路径&quot;">​</a></h6><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 卷名</span></span></code></pre></div><p>-v :ro 路径只能通过宿主机操作，容器内部不能操作</p><p>-v :rw</p><h5 id="挂载" tabindex="-1">挂载 <a class="header-anchor" href="#挂载" aria-label="Permalink to &quot;挂载&quot;">​</a></h5><ul><li>-v 容器内路径 # 匿名挂载</li><li>-v 卷名:容器内路径 # 具名挂载</li><li>-v 宿主机路径:容器内路径 # 指定路径挂载</li></ul><h1 id="数据卷容器" tabindex="-1">数据卷容器 <a class="header-anchor" href="#数据卷容器" aria-label="Permalink to &quot;数据卷容器&quot;">​</a></h1><h6 id="多个mysql同步数据" tabindex="-1">多个mysql同步数据 <a class="header-anchor" href="#多个mysql同步数据" aria-label="Permalink to &quot;多个mysql同步数据&quot;">​</a></h6><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--volumes-from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 容器名</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #多个容器”互相“共享数据</span></span></code></pre></div><blockquote><h3 id="删除是否会影响" tabindex="-1">删除是否会影响？？？？？？ <a class="header-anchor" href="#删除是否会影响" aria-label="Permalink to &quot;删除是否会影响？？？？？？&quot;">​</a></h3></blockquote><h1 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h1><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imagename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h6 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h6><ol><li>每个保留关键字（指令）都是必须是大写字母</li><li>执行从上到下顺序执行</li><li>#表示注释</li><li>每一个指令都会创建提交一个新的镜像层，并提交！</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 基础镜像，一切从这里开始构建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MAINTAINER</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 镜像是谁写的，姓名+邮箱</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 镜像构建的时候需要运行的命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ADD</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 添加内容，压缩包等</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 镜像的工作目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VOLUME</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 挂载目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 保留端口配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENTRYPOINT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 指定这个容器启动的时候要运行的命令，可以追加命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ONBUILD</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 当构建一个被集成Dockerfile 这个时候就会运行ONBUILD的指令，触发指令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 类似ADD，将我们文件拷贝到镜像中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENV</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # 构建时设置环境变量</span></span></code></pre></div><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=682874762,801900271&amp;fm=26&amp;gp=0.jpg" alt="img"></p><h1 id="docker网络" tabindex="-1">Docker网络 <a class="header-anchor" href="#docker网络" aria-label="Permalink to &quot;Docker网络&quot;">​</a></h1><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --driver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bridge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --subnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 192.168.0.0/16</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --gateway</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.0.1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tomcat1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --net</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mynet</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#网络联通</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 网络名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 容器名</span></span></code></pre></div><h1 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker Compose&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>定义、运行多个容器</p><p>YAML 配置文件</p><p>命令有哪些</p><p>作用：批量容器编排</p><p>Compose是docker官方的开源项目，需要安装</p><p>Dockerfile让程序在任何地方运行。web服务。redis、mysql、nginx...多个容器。</p><p>docker-compose.yml：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.9&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # optional since v1.27.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5000:5000&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.:/code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">logvolume01:/var/log</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    links</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  logvolume01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span></code></pre></div><p>compose： 重要概念</p><ul><li>服务services,容器。</li><li>项目project。一组关联的容器。</li></ul><h2 id="安装" tabindex="-1">安装： <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装：&quot;">​</a></h2><ol><li>下载</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)-$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/docker-compose</span></span></code></pre></div><ol start="2"><li>授权</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/docker-compose</span></span></code></pre></div><h2 id="体验" tabindex="-1">体验 <a class="header-anchor" href="#体验" aria-label="Permalink to &quot;体验&quot;">​</a></h2><ol><li>应用 app.py</li><li>Dockerfile 应用打包为镜像</li><li>Docker-compose yaml文件 （定义整个服务，需要的环境。web,redis）</li><li>启动compose项目（docker-compose up）</li></ol><h4 id="docker小结" tabindex="-1">Docker小结 <a class="header-anchor" href="#docker小结" aria-label="Permalink to &quot;Docker小结&quot;">​</a></h4><ol><li>Docker镜像</li><li>Dockerfile构建镜像</li><li>docker-compose启动项目（编排、多个微服务/环境）</li><li>Docker网络</li></ol><blockquote><p>自己搭建一些开源项目</p></blockquote><p>掌握： docker基础，原理、网络、服务、集群、错误排查、日志。</p><h1 id="docker-swarm" tabindex="-1">Docker Swarm <a class="header-anchor" href="#docker-swarm" aria-label="Permalink to &quot;Docker Swarm&quot;">​</a></h1><h5 id="工作模式" tabindex="-1">工作模式 <a class="header-anchor" href="#工作模式" aria-label="Permalink to &quot;工作模式&quot;">​</a></h5><h5 id="搭建集群" tabindex="-1">搭建集群 <a class="header-anchor" href="#搭建集群" aria-label="Permalink to &quot;搭建集群&quot;">​</a></h5><ol><li><p>生成主节点 init</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swarm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --advertise-addr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip</span></span></code></pre></div></li><li><p>加入（管理者、worker）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swarm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> join</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ......</span></span></code></pre></div></li></ol><h5 id="raft协议" tabindex="-1">Raft协议 <a class="header-anchor" href="#raft协议" aria-label="Permalink to &quot;Raft协议&quot;">​</a></h5><p>​ 保证大多数节点存活才可以用。 只要 &gt; 1，集群至少大于3台！</p><p>​</p><p>集群可用：3个主节点，&gt;1台管理节点存活。</p><h4 id="概念总结" tabindex="-1">概念总结 <a class="header-anchor" href="#概念总结" aria-label="Permalink to &quot;概念总结&quot;">​</a></h4><p><strong>swarm</strong></p><p>集群的管理和编号。docker可以初始化一个swarm集群，其他节点可以加入（manager,worker）</p><p><strong>node</strong></p><p>就是一个docker节点。多个节点就组成了一个网络集群。</p><p><strong>service</strong></p><p>任务，可以在管理节点或者工作节点来运行。核心！供用户访问！</p><p><strong>task</strong></p><p>容器内的命令，细节任务。</p><blockquote><p>overlay ingress 网络模式？？？？？？？？？？？</p></blockquote><h1 id="docker-stack" tabindex="-1">Docker Stack <a class="header-anchor" href="#docker-stack" aria-label="Permalink to &quot;Docker Stack&quot;">​</a></h1><p>docker-compose 单机部署项目</p><p>docker stack部署，集群部署</p><h1 id="docker-secret" tabindex="-1">Docker Secret <a class="header-anchor" href="#docker-secret" aria-label="Permalink to &quot;Docker Secret&quot;">​</a></h1><p>安全。配置密码、证书。</p><h1 id="docker-config" tabindex="-1">Docker Config <a class="header-anchor" href="#docker-config" aria-label="Permalink to &quot;Docker Config&quot;">​</a></h1><p>配置</p><h1 id="扩展到k8s" tabindex="-1">扩展到k8s <a class="header-anchor" href="#扩展到k8s" aria-label="Permalink to &quot;扩展到k8s&quot;">​</a></h1><h5 id="云原生时代" tabindex="-1">云原生时代 <a class="header-anchor" href="#云原生时代" aria-label="Permalink to &quot;云原生时代&quot;">​</a></h5><blockquote><p>GO语言！必须掌握！</p><blockquote><p>GO是并发语言</p></blockquote></blockquote>`,107)]))}const g=i(t,[["render",n]]);export{c as __pageData,g as default};
