const t=JSON.parse('{"key":"v-ab8fb5bc","path":"/blog/old/language/java/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3.html","title":"抽象类和接口","lang":"zh-CN","frontmatter":{"title":"抽象类和接口","date":"2020-01-01T09:02:55.000Z","category":["编程语言","Java"],"tag":["Java"],"description":"通过抽象类和接口，实现面向对象、多态、代码解耦 抽象类 抽象：从具体的事物抽出、概括出他们共同的方面、本质属性与关系等，而将个别的、非本质的方面、属性与关系舍弃，这种思维过程，成为抽象。简单来说，就是取共性化抽象。 一个类，使用abstract修饰 特点： - 包含抽象方法的类必须被声明为抽象类，抽象类可以不包含抽象方法 - 抽象类不能被实例化 - 可以包含具体的属性和方法 - 继承抽象类或实现接口的类，若未实现所有方法，则须声明为抽象类 接口 接口不是类，类描述对象的属性和方法，接口则包含类要实现的方法。 接口用来指定标准 在Java中，接口类型可以用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。 接口特性： 方法被隐式指定为public abstract 变量被隐式指定为public static final 接口中的方法不能在接口中实现 总结 抽象类是对一组具有相同属性和方法的逻辑上有关系的事物的一种抽象，而接口则是对一组具有相同属性和方法的逻辑上不相关的事物的一种抽象。 工厂模式，实现类的创建与使用的分离 实例，Datax-web中Json的构建： ​\\t构建Json: ​\\t\\t\\t处理读，多数据源 ​\\t\\t\\t处理写，多数据源 ​\\t抽象插件类 插件接口，定义插件的标准 ​\\t\\t\\t读抽象类 ​\\t\\t\\t写抽象类 ​\\t工厂类，实例化需要的插件","head":[["meta",{"property":"og:url","content":"https://alooc.github.io/blog/old/language/java/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"Alooc"}],["meta",{"property":"og:title","content":"抽象类和接口"}],["meta",{"property":"og:description","content":"通过抽象类和接口，实现面向对象、多态、代码解耦 抽象类 抽象：从具体的事物抽出、概括出他们共同的方面、本质属性与关系等，而将个别的、非本质的方面、属性与关系舍弃，这种思维过程，成为抽象。简单来说，就是取共性化抽象。 一个类，使用abstract修饰 特点： - 包含抽象方法的类必须被声明为抽象类，抽象类可以不包含抽象方法 - 抽象类不能被实例化 - 可以包含具体的属性和方法 - 继承抽象类或实现接口的类，若未实现所有方法，则须声明为抽象类 接口 接口不是类，类描述对象的属性和方法，接口则包含类要实现的方法。 接口用来指定标准 在Java中，接口类型可以用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。 接口特性： 方法被隐式指定为public abstract 变量被隐式指定为public static final 接口中的方法不能在接口中实现 总结 抽象类是对一组具有相同属性和方法的逻辑上有关系的事物的一种抽象，而接口则是对一组具有相同属性和方法的逻辑上不相关的事物的一种抽象。 工厂模式，实现类的创建与使用的分离 实例，Datax-web中Json的构建： ​\\t构建Json: ​\\t\\t\\t处理读，多数据源 ​\\t\\t\\t处理写，多数据源 ​\\t抽象插件类 插件接口，定义插件的标准 ​\\t\\t\\t读抽象类 ​\\t\\t\\t写抽象类 ​\\t工厂类，实例化需要的插件"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T01:58:54.000Z"}],["meta",{"property":"article:author","content":"Alooc"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2020-01-01T09:02:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T01:58:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象类和接口\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-01T09:02:55.000Z\\",\\"dateModified\\":\\"2024-04-22T01:58:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alooc\\",\\"url\\":\\"https://alooc.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1713751134000,"updatedTime":1713751134000,"contributors":[{"name":"dongzhaohe","email":"dongzhaohe@credamo.com","commits":1}]},"readingTime":{"minutes":1.57,"words":471},"filePathRelative":"blog/old/language/java/抽象类和接口.md","localizedDate":"2020年1月1日","excerpt":"<blockquote>\\n<blockquote>\\n<p>通过抽象类和接口，实现面向对象、多态、代码解耦</p>\\n</blockquote>\\n</blockquote>\\n<ol>\\n<li>\\n<p>抽象类</p>\\n<p>抽象：从具体的事物抽出、概括出他们共同的方面、本质属性与关系等，而将个别的、非本质的方面、属性与关系舍弃，这种思维过程，成为抽象。简单来说，就是取共性化抽象。</p>\\n<p>一个类，使用abstract修饰</p>\\n<p>特点：</p>\\n<pre><code> - 包含抽象方法的类必须被声明为抽象类，抽象类可以不包含抽象方法\\n - 抽象类不能被实例化\\n - 可以包含具体的属性和方法\\n - 继承抽象类或实现接口的类，若未实现所有方法，则须声明为抽象类\\n</code></pre>\\n</li>\\n<li>\\n<p>接口</p>\\n<p>接口不是类，类描述对象的属性和方法，接口则包含类要实现的方法。</p>\\n<p>接口用来指定标准</p>\\n<ul>\\n<li>在Java中，接口类型可以用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</li>\\n</ul>\\n<p>接口特性：</p>\\n<ul>\\n<li>方法被隐式指定为<code>public abstract</code></li>\\n<li>变量被隐式指定为<code>public static final</code></li>\\n<li>接口中的方法不能在接口中实现</li>\\n</ul>\\n</li>\\n<li>\\n<p>总结</p>\\n<ol>\\n<li>\\n<p>抽象类是对一组具有相同属性和方法的逻辑上有关系的事物的一种抽象，而接口则是对一组具有相同属性和方法的逻辑上不相关的事物的一种抽象。</p>\\n</li>\\n<li>\\n<p>工厂模式，实现类的创建与使用的分离</p>\\n</li>\\n<li>\\n<p>实例，Datax-web中Json的构建：</p>\\n<p>​\\t构建Json:<br>\\n​\\t\\t\\t处理读，多数据源<br>\\n​\\t\\t\\t处理写，多数据源<br>\\n​\\t抽象插件类   插件接口，定义插件的标准<br>\\n​\\t\\t\\t读抽象类<br>\\n​\\t\\t\\t写抽象类<br>\\n​\\t工厂类，实例化需要的插件</p>\\n</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
