import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,b as l}from"./app-e8d8d4c9.js";const r={},h=l('<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><ul><li><p>基本数据类型</p><ul><li>数值型 <ul><li>整数类型 <ul><li>byte 字节 = 8bit 位</li><li>short 2字节16位</li><li>int 4字节32位 包装器类有-128——127的常量池 <code>是Java的默认整数类型</code></li><li>long 8字节64位</li></ul></li><li>浮点类型 <ul><li>float 4字节</li><li>double 8字节 <code>是Java默认的浮点数据类型</code></li></ul></li><li>字符型 char 2字节</li><li>布尔型 boolean 1字节</li></ul></li></ul></li><li><p>引用数据类型</p><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul><h1 id="条件控制" tabindex="-1"><a class="header-anchor" href="#条件控制" aria-hidden="true">#</a> 条件控制</h1><ul><li>if else</li><li>while</li><li>for <ul><li>for(;;)等价于while(true)</li></ul></li><li>when case case的类型仅限于 byte,short,int,char,enum，long不能作为case类型</li></ul><h1 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符" aria-hidden="true">#</a> 访问修饰符</h1><ul><li>private 仅本类访问</li><li>default 本类及类所在包可访问</li><li>protected 本类，类所在包，继承当前类的子类可访问</li><li>public 所有类都可访问 接口的方法默认是public</li></ul><h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h1><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h2><p>封装属性和行为</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>能用接口，就不要用继承</p><ul><li>抽象类：抽象公共的方法和属性</li><li>接口： 定义一组行为规范</li></ul><p>this：指向当前类对象的一个引用</p><p>​ this() 构造方法，放到第一行</p><p>super：指向当前类最近的父类的一个引用</p><p>​ super() 父类的构造方法</p><p>​ super()和this()不能重复出现，因为this()已经调用了super()</p><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h2><p>变量的类型在运行时确认，而不是在编译是就写死</p><h1 id="常见api总结" tabindex="-1"><a class="header-anchor" href="#常见api总结" aria-hidden="true">#</a> 常见API总结：</h1><h2 id="和equals" tabindex="-1"><a class="header-anchor" href="#和equals" aria-hidden="true">#</a> ==和equals</h2><p>==： 判断两个对象的地址是不是相等，基本数据类型比较值是否相等</p><p>equals：判断两个对象的内容是否相等</p><p>​ <code>若重写equals,需要重写hascode。规定，两个对象相等，则hascode也一定相同。若不重写，会出现两个hascode相同的对象，但不是equals</code></p><p>​</p><h2 id="files" tabindex="-1"><a class="header-anchor" href="#files" aria-hidden="true">#</a> Files</h2><p>Files. exists()：检测⽂件路径是否存在。<br> Files. createFile()：创建⽂件。<br> Files. createDirectory()：创建⽂件夹。<br> Files. delete()：删除⼀个⽂件或⽬录。<br> Files. copy()：复制⽂件。<br> Files. move()：移动⽂件。<br> Files. size()：查看⽂件个数。<br> Files. read()：读取⽂件。<br> Files. write()：写⼊⽂件。</p><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><p>indexOf()：返回指定字符的索引。<br> charAt()：返回指定索引处的字符。<br> replace()：字符串替换。<br> trim()：去除字符串两端空⽩。<br> split()：分割字符串，返回⼀个分割后的字符串数组。<br> getBytes()：返回字符串的 byte 类型数组。<br> length()：返回字符串⻓度。<br> toLowerCase()：将字符串转成⼩写字⺟。<br> toUpperCase()：将字符串转成⼤写字符。<br> substring()：截取字符串。<br> equals()：字符串⽐较。</p>',29),s=[h];function t(d,c){return i(),a("div",null,s)}const u=e(r,[["render",t],["__file","基础.html.vue"]]);export{u as default};
