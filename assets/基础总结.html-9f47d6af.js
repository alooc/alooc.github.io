const t=JSON.parse('{"key":"v-4d675cd4","path":"/blog/old/fe/skill/websocket/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93.html","title":"websocket笔记","lang":"zh-CN","frontmatter":{"title":"websocket笔记","date":"2020-01-01T09:02:55.000Z","category":["前端技术","websocket"],"tag":["websocket"],"description":"1.websocket是什么： \\twebsocket 基于TCP的一种新的网络协议，全双工 允许服务器主动向客户端发送消息 \\t \\t具体原理是什么： \\t\\t浏览器发送websocket连线请求，服务器回应。只需一次握手，就可建立一条快速通道，进行数据传输 \\t 2.原生websocket的使用 \\t1.引入依赖 \\t\\t&lt;dependency&gt; \\t\\t &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; \\t\\t &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt; \\t\\t&lt;/dependency&gt; \\t2.配置类 \\t\\tspringboot使用配置类开启终端，前端可以借此连接服务器 \\t3.编写websocketServer的具体实现类 \\t\\t该类处理使用websocket时的连接关闭和消息处理 \\t4.前端调用 \\t\\t通过controller调用websocketServer的具体实现类的方法 \\t\\t前端可以使用WebSocket的API 3.sockjs + stomp的使用 \\t比原生的好用 \\t1.引入依赖 \\t\\t&lt;dependency&gt; \\t\\t &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; \\t\\t &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt; \\t\\t&lt;/dependency&gt; \\t\\t还要引入sockjs.min.js和stomp.min.js \\t2.配置类 \\t\\t开启sockjs的终端 \\t\\t配置消息代理，一个是服务端向客户端发送消息的代理， \\t\\t\\t\\t一个是客户端向服务端发送消息的代理 \\t3.控制器类实现业务 \\t\\t@MessageMapping处理客户端给服务端发送的消息 \\t\\t@SendTo 指定服务端向客户端发送消息 \\t4.前端调用 \\t\\t实现四个方法即可 \\t\\t\\t1.连接，订阅消息 \\t\\t\\t2.断开连接 \\t\\t\\t3.发送消息 \\t\\t\\t4.显示消息","head":[["meta",{"property":"og:url","content":"https://alooc.github.io/blog/old/fe/skill/websocket/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Alooc"}],["meta",{"property":"og:title","content":"websocket笔记"}],["meta",{"property":"og:description","content":"1.websocket是什么： \\twebsocket 基于TCP的一种新的网络协议，全双工 允许服务器主动向客户端发送消息 \\t \\t具体原理是什么： \\t\\t浏览器发送websocket连线请求，服务器回应。只需一次握手，就可建立一条快速通道，进行数据传输 \\t 2.原生websocket的使用 \\t1.引入依赖 \\t\\t&lt;dependency&gt; \\t\\t &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; \\t\\t &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt; \\t\\t&lt;/dependency&gt; \\t2.配置类 \\t\\tspringboot使用配置类开启终端，前端可以借此连接服务器 \\t3.编写websocketServer的具体实现类 \\t\\t该类处理使用websocket时的连接关闭和消息处理 \\t4.前端调用 \\t\\t通过controller调用websocketServer的具体实现类的方法 \\t\\t前端可以使用WebSocket的API 3.sockjs + stomp的使用 \\t比原生的好用 \\t1.引入依赖 \\t\\t&lt;dependency&gt; \\t\\t &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; \\t\\t &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt; \\t\\t&lt;/dependency&gt; \\t\\t还要引入sockjs.min.js和stomp.min.js \\t2.配置类 \\t\\t开启sockjs的终端 \\t\\t配置消息代理，一个是服务端向客户端发送消息的代理， \\t\\t\\t\\t一个是客户端向服务端发送消息的代理 \\t3.控制器类实现业务 \\t\\t@MessageMapping处理客户端给服务端发送的消息 \\t\\t@SendTo 指定服务端向客户端发送消息 \\t4.前端调用 \\t\\t实现四个方法即可 \\t\\t\\t1.连接，订阅消息 \\t\\t\\t2.断开连接 \\t\\t\\t3.发送消息 \\t\\t\\t4.显示消息"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-20T16:15:20.000Z"}],["meta",{"property":"article:author","content":"Alooc"}],["meta",{"property":"article:tag","content":"websocket"}],["meta",{"property":"article:published_time","content":"2020-01-01T09:02:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-20T16:15:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"websocket笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-01T09:02:55.000Z\\",\\"dateModified\\":\\"2024-09-20T16:15:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alooc\\",\\"url\\":\\"https://alooc.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1726848920000,"updatedTime":1726848920000,"contributors":[{"name":"alooc","email":"zbsx508@gmail.com","commits":1}]},"readingTime":{"minutes":1.2,"words":360},"filePathRelative":"blog/old/fe/skill/websocket/基础总结.md","localizedDate":"2020年1月1日","excerpt":"<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>1.websocket是什么：\\n\\twebsocket 基于TCP的一种新的网络协议，全双工  允许服务器主动向客户端发送消息\\n\\n\\t\\n\\t具体原理是什么：\\n\\t\\t浏览器发送websocket连线请求，服务器回应。只需一次握手，就可建立一条快速通道，进行数据传输\\n\\t\\n\\n\\n2.原生websocket的使用\\n\\t1.引入依赖\\n\\t\\t&lt;dependency&gt;\\n\\t\\t    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\\n\\t\\t    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;\\n\\t\\t&lt;/dependency&gt;\\n\\t2.配置类\\n\\t\\tspringboot使用配置类开启终端，前端可以借此连接服务器\\n\\t3.编写websocketServer的具体实现类\\n\\t\\t该类处理使用websocket时的连接关闭和消息处理\\n\\t4.前端调用\\n\\t\\t通过controller调用websocketServer的具体实现类的方法\\n\\t\\t前端可以使用WebSocket的API\\n3.sockjs + stomp的使用\\n\\t比原生的好用\\n\\t1.引入依赖\\n\\t\\t&lt;dependency&gt;\\n\\t\\t    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\\n\\t\\t    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;\\n\\t\\t&lt;/dependency&gt;\\n\\t\\t还要引入sockjs.min.js和stomp.min.js\\n\\t2.配置类\\n\\t\\t开启sockjs的终端\\n\\t\\t配置消息代理，一个是服务端向客户端发送消息的代理，\\n\\t\\t\\t\\t一个是客户端向服务端发送消息的代理\\n\\t3.控制器类实现业务\\n\\t\\t@MessageMapping处理客户端给服务端发送的消息\\n\\t\\t@SendTo 指定服务端向客户端发送消息\\n\\t4.前端调用\\n\\t\\t实现四个方法即可\\n\\t\\t\\t1.连接，订阅消息\\n\\t\\t\\t2.断开连接\\n\\t\\t\\t3.发送消息\\n\\t\\t\\t4.显示消息\\n\\n\\t\\n\\t\\n\\t\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
