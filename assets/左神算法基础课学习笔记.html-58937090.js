import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as n,b as t}from"./app-e8d8d4c9.js";const e={},g=t(`<p>时间复杂度：</p><p>​ <img src="https://raw.githubusercontent.com/alooc/images/main/image-20220225114342859.png" alt="image-20220225114342859" loading="lazy"></p><p>异或运算 不同为1 相同为0</p><p>取一个数最右侧的1 eor &amp; (~eor + 1)</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220308211917740.png" alt="image-20220308211917740" tabindex="0" loading="lazy"><figcaption>image-20220308211917740</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220308211953725.png" alt="image-20220308211953725" tabindex="0" loading="lazy"><figcaption>image-20220308211953725</figcaption></figure><p>mid=L + (R-L)/2 取中点 不会溢出</p><p>mid=L + ((R-L) &gt;&gt; 1)</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220312130559319.png" alt="image-20220312130559319" tabindex="0" loading="lazy"><figcaption>image-20220312130559319</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220312165213887.png" alt="image-20220312165213887" tabindex="0" loading="lazy"><figcaption>image-20220312165213887</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220314092102690.png" alt="image-20220314092102690" tabindex="0" loading="lazy"><figcaption>image-20220314092102690</figcaption></figure><p>快排1 &lt;=num &gt;num</p><p>快排2 &lt;num =num &gt;num</p><p>快排3 随机取num &lt;num =num &gt;num</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220314150202017.png" alt="image-20220314150202017" tabindex="0" loading="lazy"><figcaption>image-20220314150202017</figcaption></figure><p>手写堆</p><p>堆排序</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220314153756940.png" alt="image-20220314153756940" tabindex="0" loading="lazy"><figcaption>image-20220314153756940</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220314122621445.png" alt="image-20220314122621445" tabindex="0" loading="lazy"><figcaption>image-20220314122621445</figcaption></figure><p>基于比较的排序，只和俩个数比较大小有关</p><p>不基于比较的排序 要根据数据具体状况进行定制</p><p>计数排序</p><p>基数排序 低位到高位依次排序 N进制需准备N个桶。设最高M位，则出入桶的次数为M</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220314155032440.png" alt="image-20220314155032440" tabindex="0" loading="lazy"><figcaption>image-20220314155032440</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220314172958431.png" alt="image-20220314172958431" tabindex="0" loading="lazy"><figcaption>image-20220314172958431</figcaption></figure><p>快速排序用的最多</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220314173254103.png" alt="image-20220314173254103" tabindex="0" loading="lazy"><figcaption>image-20220314173254103</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220314173354701.png" alt="image-20220314173354701" tabindex="0" loading="lazy"><figcaption>image-20220314173354701</figcaption></figure><p>利用各算法优势排序 为综合排序</p><p>HashSet</p><p>HashMap</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315120344022.png" alt="image-20220315120344022" tabindex="0" loading="lazy"><figcaption>image-20220315120344022</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315121215420.png" alt="image-20220315121215420" tabindex="0" loading="lazy"><figcaption>image-20220315121215420</figcaption></figure><p>HashSet HashMap</p><p>TreeSet TreeMap</p><p>中等难度算法提不会涉及原理</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315121412356.png" alt="image-20220315121412356" tabindex="0" loading="lazy"><figcaption>image-20220315121412356</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315121616567.png" alt="image-20220315121616567" tabindex="0" loading="lazy"><figcaption>image-20220315121616567</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315121627823.png" alt="image-20220315121627823" tabindex="0" loading="lazy"><figcaption>image-20220315121627823</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315121722698.png" alt="image-20220315121722698" tabindex="0" loading="lazy"><figcaption>image-20220315121722698</figcaption></figure><p>快慢指针，控制慢指针指向的位置</p><p>慢指针指向：</p><ol><li>奇数 <code>中点</code>；偶数 <code>靠后</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fast <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>奇数 <code>中点</code>；偶数 <code>靠前</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>奇数 <code>中点靠后</code>；偶数 <code>靠后</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>slow <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//慢指针先走一步 </span>
fast<span class="token punctuation">.</span>next <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>奇数 <code>中点</code>考前；偶数 <code>靠前</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next <span class="token comment">//快指针先走一步 </span>
fast<span class="token punctuation">.</span>next <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>奇数 <code>中点考前</code>；偶数 <code>靠前再靠前</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//快指针先走两步 </span>
fast<span class="token punctuation">.</span>next <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315121919161.png" alt="image-20220315121919161" tabindex="0" loading="lazy"><figcaption>image-20220315121919161</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315122535838.png" alt="image-20220315122535838" tabindex="0" loading="lazy"><figcaption>image-20220315122535838</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315123118968.png" alt="image-20220315123118968" tabindex="0" loading="lazy"><figcaption>image-20220315123118968</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315123952701.png" alt="image-20220315123952701" tabindex="0" loading="lazy"><figcaption>image-20220315123952701</figcaption></figure><p>找第一个入环节点：</p><pre><code>1. 使用额外数据结构 set
1. 快慢指针。 快慢指针一定在环上相遇，之后快指针回到head,然后快慢指针都同时走一步，之后快慢指针相遇的位置即为第一个入环节点。
</code></pre><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315181101569.png" alt="image-20220315181101569" tabindex="0" loading="lazy"><figcaption>image-20220315181101569</figcaption></figure><p>递归序</p><p>非递归实现先序、中序、后序 ：</p><p>先序，后序</p><pre><code>															1. 栈弹出
															1. 打印 处理
															1. 先压右，再压左
															1. 循环
</code></pre><p>中序：</p><p>​ 使用左边界分解整颗数</p><p>左头右[左头]</p><p>深度优先遍历是先序遍历</p><p>宽度优先遍历使用队列实现</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315185702850.png" alt="image-20220315185702850" tabindex="0" loading="lazy"><figcaption>image-20220315185702850</figcaption></figure><p>树型DP 【一个套路解决】</p><p>左右子树提供信息，动态处理。</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315202152383.png" alt="image-20220315202152383" tabindex="0" loading="lazy"><figcaption>image-20220315202152383</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315203759234.png" alt="image-20220315203759234" tabindex="0" loading="lazy"><figcaption>image-20220315203759234</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315204459141.png" alt="image-20220315204459141" tabindex="0" loading="lazy"><figcaption>image-20220315204459141</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220315205030708.png" alt="image-20220315205030708" tabindex="0" loading="lazy"><figcaption>image-20220315205030708</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220316102119792.png" alt="image-20220316102119792" tabindex="0" loading="lazy"><figcaption>image-20220316102119792</figcaption></figure><p>用最喜欢的图的表达方式，实现所有的算法</p><p>实际应用时 只需要完成图结构的转换即可。</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220316111552089.png" alt="image-20220316111552089" tabindex="0" loading="lazy"><figcaption>image-20220316111552089</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220316112800142.png" alt="image-20220316112800142" tabindex="0" loading="lazy"><figcaption>image-20220316112800142</figcaption></figure><p>依赖包的引入顺序</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220316113525239.png" alt="image-20220316113525239" tabindex="0" loading="lazy"><figcaption>image-20220316113525239</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220316113536359.png" alt="image-20220316113536359" tabindex="0" loading="lazy"><figcaption>image-20220316113536359</figcaption></figure><p>k算法 p算法 用来生成图的最小生成树</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220317105837717.png" alt="image-20220317105837717" tabindex="0" loading="lazy"><figcaption>image-20220317105837717</figcaption></figure><p>====================================================================================================</p><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220317183328517.png" alt="image-20220317183328517" tabindex="0" loading="lazy"><figcaption>image-20220317183328517</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220319210655844.png" alt="image-20220319210655844" tabindex="0" loading="lazy"><figcaption>image-20220319210655844</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220319211325932.png" alt="image-20220319211325932" tabindex="0" loading="lazy"><figcaption>image-20220319211325932</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220319213530316.png" alt="image-20220319213530316" tabindex="0" loading="lazy"><figcaption>image-20220319213530316</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220319213555518.png" alt="image-20220319213555518" tabindex="0" loading="lazy"><figcaption>image-20220319213555518</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220319213659918.png" alt="image-20220319213659918" tabindex="0" loading="lazy"><figcaption>image-20220319213659918</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220319213727732.png" alt="image-20220319213727732" tabindex="0" loading="lazy"><figcaption>image-20220319213727732</figcaption></figure><figure><img src="https://raw.githubusercontent.com/alooc/images/main/image-20220403090439199.png" alt="image-20220403090439199" tabindex="0" loading="lazy"><figcaption>image-20220403090439199</figcaption></figure>`,94),o=[g];function s(p,c){return i(),n("div",null,o)}const r=a(e,[["render",s],["__file","左神算法基础课学习笔记.html.vue"]]);export{r as default};
