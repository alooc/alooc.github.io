const n=JSON.parse('{"key":"v-f63cc7c8","path":"/blog/old/beframework/spring/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93.html","title":"Spring基础用法总结","lang":"zh-CN","frontmatter":{"title":"Spring基础用法总结","date":"2020-01-01T09:02:55.000Z","sidebar":"heading","category":["后端框架","Spring"],"tag":"Spring","description":"Spring的基本用法： ​\\tspring是一个很普通但很实用的一个框架，它提取了大量实际开发中需要重复解决的步骤，将这些步骤抽象成一个框架。 1.spring简介： spring5 - Spring Core Container(即Spring容器)代表了Spring框架的核心机制。 ​ 2.spring入门： 21个jar包 实用spring管理bean： spring核心容器理论：spring核心容器就是一个超级大工厂，所有的对象都会被当成spring核心容器管理的对象。 Spring对Bean没有任何要求，只要是java类，将会当作bean处理 对于Spring框架而言，一切Java对象都是Bean。 \\t\\t\\t\\t&lt;beans&gt; \\t\\t\\t\\t\\t&lt;bean id=\\"\\" class=\\"\\"&gt; \\t\\t\\t\\t\\t\\t&lt;property name=\\"\\" ref=\\"\\"/&gt; \\t\\t\\t\\t\\t&lt;/bean&gt; \\t\\t\\t\\t\\t&lt;bean id=\\"\\" class=\\"\\"&gt; \\t\\t\\t\\t\\t\\t&lt;property name=\\"\\" value=\\"\\"/&gt; \\t\\t\\t\\t\\t&lt;/bean&gt; \\t\\t\\t\\t\\t... \\t\\t\\t\\t&lt;/beans&gt; spring通过反射机制从xml文件中获取bean对象： ​\\tspring底层大概的执行代码： 创建bean： String idStr=bean中的id; String classStr=bean中的class; Class clazz=Class.forName(classStr); Object obj=clazz.newInstance(); spring的容器container.put(idStr,obj); 设置参数（调用setter方法）： String nameStr=属性的name; String refStr=属性的引用ref，某一个bean的id 或某个value参数值; String setterName=\\"set\\"+nameStr.subString(0,1).toUpperCase()+nameStr.subString(1);生成方法名 setName Object paramBean=container.get(refStr) Method setter=clazz.getMethod(setterName,paramBean.getClass()); setter.invoke(obj,paramBean); 在程序中访问bean: ​\\t\\tApplicationContext是最常用的接口，\\t有两个实现类： ClassPathXmlApplicationContext\\t从类加载路径下搜索配置文件，并根据配置文件创建spring容器 FileSystemXmlApplicationContext\\t从文件系统的相对路径或绝对路径中搜索配置文件，并根据配置文件创建spring容器 ApplicationContext ctx=new ClassPathXmlApplicationContext(\\"beans.xml\\"); Person p=ctx.getBean(\\"person\\",Person.class); 获取对象的两个方法： Object getBean(String id) 需要强制类型转换: Person p=(Person)ctx.getBean(\\"person\\"); T getBean(String id,Class&lt;T&gt; requiredType) 无需进行强制类型转换： Person p=ctx.getBean(\\"person\\",Person.class);","head":[["meta",{"property":"og:url","content":"https://alooc.github.io/blog/old/beframework/spring/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Alooc"}],["meta",{"property":"og:title","content":"Spring基础用法总结"}],["meta",{"property":"og:description","content":"Spring的基本用法： ​\\tspring是一个很普通但很实用的一个框架，它提取了大量实际开发中需要重复解决的步骤，将这些步骤抽象成一个框架。 1.spring简介： spring5 - Spring Core Container(即Spring容器)代表了Spring框架的核心机制。 ​ 2.spring入门： 21个jar包 实用spring管理bean： spring核心容器理论：spring核心容器就是一个超级大工厂，所有的对象都会被当成spring核心容器管理的对象。 Spring对Bean没有任何要求，只要是java类，将会当作bean处理 对于Spring框架而言，一切Java对象都是Bean。 \\t\\t\\t\\t&lt;beans&gt; \\t\\t\\t\\t\\t&lt;bean id=\\"\\" class=\\"\\"&gt; \\t\\t\\t\\t\\t\\t&lt;property name=\\"\\" ref=\\"\\"/&gt; \\t\\t\\t\\t\\t&lt;/bean&gt; \\t\\t\\t\\t\\t&lt;bean id=\\"\\" class=\\"\\"&gt; \\t\\t\\t\\t\\t\\t&lt;property name=\\"\\" value=\\"\\"/&gt; \\t\\t\\t\\t\\t&lt;/bean&gt; \\t\\t\\t\\t\\t... \\t\\t\\t\\t&lt;/beans&gt; spring通过反射机制从xml文件中获取bean对象： ​\\tspring底层大概的执行代码： 创建bean： String idStr=bean中的id; String classStr=bean中的class; Class clazz=Class.forName(classStr); Object obj=clazz.newInstance(); spring的容器container.put(idStr,obj); 设置参数（调用setter方法）： String nameStr=属性的name; String refStr=属性的引用ref，某一个bean的id 或某个value参数值; String setterName=\\"set\\"+nameStr.subString(0,1).toUpperCase()+nameStr.subString(1);生成方法名 setName Object paramBean=container.get(refStr) Method setter=clazz.getMethod(setterName,paramBean.getClass()); setter.invoke(obj,paramBean); 在程序中访问bean: ​\\t\\tApplicationContext是最常用的接口，\\t有两个实现类： ClassPathXmlApplicationContext\\t从类加载路径下搜索配置文件，并根据配置文件创建spring容器 FileSystemXmlApplicationContext\\t从文件系统的相对路径或绝对路径中搜索配置文件，并根据配置文件创建spring容器 ApplicationContext ctx=new ClassPathXmlApplicationContext(\\"beans.xml\\"); Person p=ctx.getBean(\\"person\\",Person.class); 获取对象的两个方法： Object getBean(String id) 需要强制类型转换: Person p=(Person)ctx.getBean(\\"person\\"); T getBean(String id,Class&lt;T&gt; requiredType) 无需进行强制类型转换： Person p=ctx.getBean(\\"person\\",Person.class);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T01:58:54.000Z"}],["meta",{"property":"article:author","content":"Alooc"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2020-01-01T09:02:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T01:58:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring基础用法总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-01T09:02:55.000Z\\",\\"dateModified\\":\\"2024-04-22T01:58:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alooc\\",\\"url\\":\\"https://alooc.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.spring简介：","slug":"_1-spring简介","link":"#_1-spring简介","children":[]},{"level":2,"title":"2.spring入门：","slug":"_2-spring入门","link":"#_2-spring入门","children":[]},{"level":2,"title":"3.Spring的核心机制：依赖注入：","slug":"_3-spring的核心机制-依赖注入","link":"#_3-spring的核心机制-依赖注入","children":[]},{"level":2,"title":"4.使用spring容器：","slug":"_4-使用spring容器","link":"#_4-使用spring容器","children":[]},{"level":2,"title":"6.Spring提供的Java配置管理：","slug":"_6-spring提供的java配置管理","link":"#_6-spring提供的java配置管理","children":[]},{"level":2,"title":"7.创建bean的三种方式：","slug":"_7-创建bean的三种方式","link":"#_7-创建bean的三种方式","children":[]},{"level":2,"title":"8.深入理解容器中的Bean:","slug":"_8-深入理解容器中的bean","link":"#_8-深入理解容器中的bean","children":[]},{"level":2,"title":"9.容器中Bean的生命周期：","slug":"_9-容器中bean的生命周期","link":"#_9-容器中bean的生命周期","children":[]},{"level":2,"title":"10.高级依赖关系配置：","slug":"_10-高级依赖关系配置","link":"#_10-高级依赖关系配置","children":[]},{"level":2,"title":"11.基于XML Schema的简化配置方式：","slug":"_11-基于xml-schema的简化配置方式","link":"#_11-基于xml-schema的简化配置方式","children":[]},{"level":2,"title":"12.Spring提供的表达式语言(SpEL):","slug":"_12-spring提供的表达式语言-spel","link":"#_12-spring提供的表达式语言-spel","children":[]},{"level":2,"title":"1.两种后处理器：","slug":"_1-两种后处理器","link":"#_1-两种后处理器","children":[]},{"level":2,"title":"2.Spring的“零配置”支持：","slug":"_2-spring的-零配置-支持","link":"#_2-spring的-零配置-支持","children":[]},{"level":2,"title":"3.资源访问：","slug":"_3-资源访问","link":"#_3-资源访问","children":[]},{"level":2,"title":"4.Spring的AOP：","slug":"_4-spring的aop","link":"#_4-spring的aop","children":[]},{"level":2,"title":"5.Spring的缓存机制：","slug":"_5-spring的缓存机制","link":"#_5-spring的缓存机制","children":[]},{"level":2,"title":"6.Spring的事务：","slug":"_6-spring的事务","link":"#_6-spring的事务","children":[]}],"git":{"createdTime":1713751134000,"updatedTime":1713751134000,"contributors":[{"name":"dongzhaohe","email":"dongzhaohe@credamo.com","commits":1}]},"readingTime":{"minutes":19.41,"words":5823},"filePathRelative":"blog/old/beframework/spring/基础总结.md","localizedDate":"2020年1月1日","excerpt":"<h1> Spring的基本用法：</h1>\\n<p>​\\t<code>spring是一个很普通但很实用的一个框架，它提取了大量实际开发中需要重复解决的步骤，将这些步骤抽象成一个框架。</code></p>\\n<h2> 1.spring简介：</h2>\\n<ul>\\n<li>spring5<br>\\n- Spring Core Container(即Spring容器)代表了Spring框架的核心机制。<br>\\n​</li>\\n</ul>\\n<h2> 2.spring入门：</h2>\\n<p><code>21个jar包</code></p>\\n<ul>\\n<li>\\n<p>实用spring管理bean：</p>\\n<ul>\\n<li>\\n<p>spring核心容器理论：spring核心容器就是一个超级大工厂，所有的对象都会被当成spring核心容器管理的对象。</p>\\n</li>\\n<li>\\n<p>Spring对Bean没有任何要求，只要是java类，将会当作bean处理</p>\\n</li>\\n<li>\\n<p>对于Spring框架而言，一切Java对象都是Bean。</p>\\n<div class=\\"language-xml line-numbers-mode\\" data-ext=\\"xml\\"><pre class=\\"language-xml\\"><code>\\t\\t\\t\\t<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>beans</span><span class=\\"token punctuation\\">&gt;</span></span>\\n\\t\\t\\t\\t\\t<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>bean</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">class</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>property</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">ref</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">/&gt;</span></span>\\n\\t\\t\\t\\t\\t<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>bean</span><span class=\\"token punctuation\\">&gt;</span></span>\\n\\t\\t\\t\\t\\t<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>bean</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">class</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>property</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">value</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">/&gt;</span></span>\\n\\t\\t\\t\\t\\t<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>bean</span><span class=\\"token punctuation\\">&gt;</span></span>\\n\\t\\t\\t\\t\\t...\\n\\t\\t\\t\\t<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>beans</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>spring通过反射机制从xml文件中获取bean对象：</p>\\n<ul>\\n<li>\\n<p>​\\tspring底层大概的执行代码：</p>\\n<ul>\\n<li>\\n<p>创建bean：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> idStr<span class=\\"token operator\\">=</span>bean中的id<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> classStr<span class=\\"token operator\\">=</span>bean中的<span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Class</span> clazz<span class=\\"token operator\\">=</span><span class=\\"token class-name\\">Class</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forName</span><span class=\\"token punctuation\\">(</span>classStr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Object</span> obj<span class=\\"token operator\\">=</span>clazz<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nspring的容器container<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span>idStr<span class=\\"token punctuation\\">,</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>设置参数（调用setter方法）：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> nameStr<span class=\\"token operator\\">=</span>属性的name<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> refStr<span class=\\"token operator\\">=</span>属性的引用ref，某一个bean的id 或某个value参数值<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> setterName<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"set\\"</span><span class=\\"token operator\\">+</span>nameStr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">subString</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toUpperCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span>nameStr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">subString</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>生成方法名 setName\\n<span class=\\"token class-name\\">Object</span> paramBean<span class=\\"token operator\\">=</span>container<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>refStr<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token class-name\\">Method</span> setter<span class=\\"token operator\\">=</span>clazz<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMethod</span><span class=\\"token punctuation\\">(</span>setterName<span class=\\"token punctuation\\">,</span>paramBean<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nsetter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">invoke</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span>paramBean<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>在程序中访问bean:</p>\\n<ul>\\n<li>\\n<p>​\\t\\t<code>ApplicationContext</code>是最常用的接口，\\t有两个实现类：</p>\\n<ul>\\n<li>\\n<p><code>ClassPathXmlApplicationContext</code>\\t从类加载路径下搜索配置文件，并根据配置文件创建spring容器</p>\\n</li>\\n<li>\\n<p><code>FileSystemXmlApplicationContext</code>\\t从文件系统的相对路径或绝对路径中搜索配置文件，并根据配置文件创建spring容器</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">ApplicationContext</span> ctx<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ClassPathXmlApplicationContext</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"beans.xml\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Person</span> p<span class=\\"token operator\\">=</span>ctx<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"person\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>获取对象的两个方法：</p>\\n<ul>\\n<li>\\n<p><code>Object getBean(String id)</code> 需要强制类型转换:</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Person</span> p<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">)</span>ctx<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"person\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><code>T getBean(String id,Class&lt;T&gt; requiredType)</code> 无需进行强制类型转换：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Person</span> p<span class=\\"token operator\\">=</span>ctx<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"person\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
