import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a,b as e,e as s,f as r}from"./app-a2c721dc.js";const t={},d=a("blockquote",null,[a("p",null,"windows 安装使用")],-1),p=a("ol",null,[a("li",null,[a("p",null,"安装exe")]),a("li",null,[a("p",null,"安装wsl,wsl2")])],-1),u={href:"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package",target:"_blank",rel:"noopener noreferrer"},m=a("ol",{start:"3"},[a("li",null,"非系统盘安装linux子系统")],-1),h={href:"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual",target:"_blank",rel:"noopener noreferrer"},k=a("ol",{start:"4"},[a("li",null,"镜像加速")],-1),b={href:"https://rvpdnlir.mirror.aliyuncs.com",target:"_blank",rel:"noopener noreferrer"},v=a("br",null,null,-1),f={href:"https://hub-mirror.c.163.com",target:"_blank",rel:"noopener noreferrer"},g=a("br",null,null,-1),_={href:"https://mirror.baidubce.com",target:"_blank",rel:"noopener noreferrer"},x=r(`<blockquote><p>常用命令</p></blockquote><p>docker run --name hello -itd -P my:v1<br> docker container ls<br> docker container start<br> docker container stop<br> docker container rm test<br> docker stats<br> docker inspect -f<br> docker build -f dw -t dw:v2 .<br> docker exec -it test bash<br> docker images<br> docker image rm</p><p>docker run --name dw1 -P -p 33001:22 -itd dw:v2 &amp;&amp; docker run --name dw2 -P -p 33002:22 -itd dw:v2 &amp;&amp; docker run --name dw3 -P -p 33003:22 -itd dw:v2</p><p>docker container stop dw1 &amp;&amp; docker container rm dw1 &amp;&amp; docker container stop dw2 &amp;&amp; docker container rm dw2 &amp;&amp; docker container stop dw3 &amp;&amp; docker container rm dw3</p><p>docker info<br> docker version<br> docker 命令 --help</p><p>帮助文档</p><p>镜像命令<br> docker images<br> docker image rm</p><p>搜索镜像<br> docker search</p><p>docker pull</p><p>docker rmi -f 容器id</p><p>容器命令<br> 新建容器并启动<br> docker run [] image<br> -d 后台方式运行<br> -it 交互<br> -p 指定端口<br> -P 随机指定端口</p><p>docker ps -a<br> ctrl+ p+ q 退出后不关闭容器<br> docker rm -rf $(docker ps -aq)</p><p>启动和停止容器<br> docker start<br> docker stop<br> docker restart<br> docker kill</p><p>常用其他命令<br> doceker run -d</p><p>日志<br> docker logs -ft --tail 19 id</p><p>查看容器中进程信息ps<br> docker top id</p><p>查看镜像元数据<br> docker inspect id</p><p>进入当前正在运行的容器<br> docker exec -it id bash<br> exec和attach的区别</p><p>从容器内拷贝文件到主机<br> docker cp id:/home/test.java /home</p><p>-rm 容器停止后就删除</p><blockquote><p>总结</p></blockquote><h1 id="容器数据卷" tabindex="-1"><a class="header-anchor" href="#容器数据卷" aria-hidden="true">#</a> 容器数据卷</h1><h3 id="使用数据卷" tabindex="-1"><a class="header-anchor" href="#使用数据卷" aria-hidden="true">#</a> 使用数据卷</h3><ol><li><p>使用 -v 主机目录:容器内目录</p></li><li><p>示例</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -d 后台运行</span>
<span class="token comment"># -p 端口映射</span>
<span class="token comment"># -v 卷挂载</span>
<span class="token comment"># --name 容器名字</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3310</span>:3306 <span class="token parameter variable">-v</span> /home/docker/mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> /home/docker/mysql/data:/var/lib/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">--name</span> mysql01 mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>具名和匿名挂载</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="匿名挂载" tabindex="-1"><a class="header-anchor" href="#匿名挂载" aria-hidden="true">#</a> 匿名挂载</h6><p>-v 只写容器内路径</p><h6 id="具名挂载" tabindex="-1"><a class="header-anchor" href="#具名挂载" aria-hidden="true">#</a> 具名挂载</h6><p>-v 指定卷名:容器内路径</p><h6 id="查看卷名的路径" tabindex="-1"><a class="header-anchor" href="#查看卷名的路径" aria-hidden="true">#</a> 查看卷名的路径</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect 卷名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-v :ro 路径只能通过宿主机操作，容器内部不能操作</p><p>-v :rw</p><h5 id="挂载" tabindex="-1"><a class="header-anchor" href="#挂载" aria-hidden="true">#</a> 挂载</h5><ul><li>-v 容器内路径 # 匿名挂载</li><li>-v 卷名:容器内路径 # 具名挂载</li><li>-v 宿主机路径:容器内路径 # 指定路径挂载</li></ul><h1 id="数据卷容器" tabindex="-1"><a class="header-anchor" href="#数据卷容器" aria-hidden="true">#</a> 数据卷容器</h1><h6 id="多个mysql同步数据" tabindex="-1"><a class="header-anchor" href="#多个mysql同步数据" aria-hidden="true">#</a> 多个mysql同步数据</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>--volumes-from 容器名 <span class="token comment">#多个容器”互相“共享数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><h3 id="删除是否会影响" tabindex="-1"><a class="header-anchor" href="#删除是否会影响" aria-hidden="true">#</a> 删除是否会影响？？？？？？</h3></blockquote><h1 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> filename <span class="token parameter variable">-t</span> imagename <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h6><ol><li>每个保留关键字（指令）都是必须是大写字母</li><li>执行从上到下顺序执行</li><li>#表示注释</li><li>每一个指令都会创建提交一个新的镜像层，并提交！</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM          <span class="token comment"># 基础镜像，一切从这里开始构建</span>
MAINTAINER    <span class="token comment"># 镜像是谁写的，姓名+邮箱</span>
RUN           <span class="token comment"># 镜像构建的时候需要运行的命令</span>
ADD           <span class="token comment"># 添加内容，压缩包等</span>
WORKDIR       <span class="token comment"># 镜像的工作目录</span>
VOLUME        <span class="token comment"># 挂载目录</span>
EXPOSE        <span class="token comment"># 保留端口配置</span>
CMD           <span class="token comment"># 指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</span>
ENTRYPOINT    <span class="token comment"># 指定这个容器启动的时候要运行的命令，可以追加命令</span>
ONBUILD       <span class="token comment"># 当构建一个被集成Dockerfile 这个时候就会运行ONBUILD的指令，触发指令</span>
COPY          <span class="token comment"># 类似ADD，将我们文件拷贝到镜像中</span>
ENV           <span class="token comment"># 构建时设置环境变量</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=682874762,801900271&amp;fm=26&amp;gp=0.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="docker网络" tabindex="-1"><a class="header-anchor" href="#docker网络" aria-hidden="true">#</a> Docker网络</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token parameter variable">--subnet</span> <span class="token number">192.168</span>.0.0/16 <span class="token parameter variable">--gateway</span> <span class="token number">192.168</span>.0.1


<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> tomcat1 <span class="token parameter variable">--net</span> mynet


<span class="token comment">#网络联通</span>
<span class="token function">docker</span> network connect 网络名 容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker Compose</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>定义、运行多个容器</p><p>YAML 配置文件</p><p>命令有哪些</p><p>作用：批量容器编排</p><p>Compose是docker官方的开源项目，需要安装</p><p>Dockerfile让程序在任何地方运行。web服务。redis、mysql、nginx...多个容器。</p><p>docker-compose.yml：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>  <span class="token comment"># optional since v1.27.0</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000:5000&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/code
      <span class="token punctuation">-</span> logvolume01<span class="token punctuation">:</span>/var/log
    <span class="token key atrule">links</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> redis
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">logvolume01</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>compose： 重要概念</p><ul><li>服务services,容器。</li><li>项目project。一组关联的容器。</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装：</h2><ol><li>下载</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>授权</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="体验" tabindex="-1"><a class="header-anchor" href="#体验" aria-hidden="true">#</a> 体验</h2>`,67),w={href:"http://app.py",target:"_blank",rel:"noopener noreferrer"},y=a("li",null,"Dockerfile 应用打包为镜像",-1),q=a("li",null,"Docker-compose yaml文件 （定义整个服务，需要的环境。web,redis）",-1),D=a("li",null,"启动compose项目（docker-compose up）",-1),O=r(`<h4 id="docker小结" tabindex="-1"><a class="header-anchor" href="#docker小结" aria-hidden="true">#</a> Docker小结</h4><ol><li>Docker镜像</li><li>Dockerfile构建镜像</li><li>docker-compose启动项目（编排、多个微服务/环境）</li><li>Docker网络</li></ol><blockquote><p>自己搭建一些开源项目</p></blockquote><p>掌握： docker基础，原理、网络、服务、集群、错误排查、日志。</p><h1 id="docker-swarm" tabindex="-1"><a class="header-anchor" href="#docker-swarm" aria-hidden="true">#</a> Docker Swarm</h1><h5 id="工作模式" tabindex="-1"><a class="header-anchor" href="#工作模式" aria-hidden="true">#</a> 工作模式</h5><h5 id="搭建集群" tabindex="-1"><a class="header-anchor" href="#搭建集群" aria-hidden="true">#</a> 搭建集群</h5><ol><li><p>生成主节点 init</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> swarm init --advertise-addr <span class="token function">ip</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>加入（管理者、worker）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> swarm <span class="token function">join</span> <span class="token parameter variable">--token</span> <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h5 id="raft协议" tabindex="-1"><a class="header-anchor" href="#raft协议" aria-hidden="true">#</a> Raft协议</h5><p>​ 保证大多数节点存活才可以用。 只要 &gt; 1，集群至少大于3台！</p><p>​</p><p>集群可用：3个主节点，&gt;1台管理节点存活。</p><h4 id="概念总结" tabindex="-1"><a class="header-anchor" href="#概念总结" aria-hidden="true">#</a> 概念总结</h4><p><strong>swarm</strong></p><p>集群的管理和编号。docker可以初始化一个swarm集群，其他节点可以加入（manager,worker）</p><p><strong>node</strong></p><p>就是一个docker节点。多个节点就组成了一个网络集群。</p><p><strong>service</strong></p><p>任务，可以在管理节点或者工作节点来运行。核心！供用户访问！</p><p><strong>task</strong></p><p>容器内的命令，细节任务。</p><blockquote><p>overlay ingress 网络模式？？？？？？？？？？？</p></blockquote><h1 id="docker-stack" tabindex="-1"><a class="header-anchor" href="#docker-stack" aria-hidden="true">#</a> Docker Stack</h1><p>docker-compose 单机部署项目</p><p>docker stack部署，集群部署</p><h1 id="docker-secret" tabindex="-1"><a class="header-anchor" href="#docker-secret" aria-hidden="true">#</a> Docker Secret</h1><p>安全。配置密码、证书。</p><h1 id="docker-config" tabindex="-1"><a class="header-anchor" href="#docker-config" aria-hidden="true">#</a> Docker Config</h1><p>配置</p><h1 id="扩展到k8s" tabindex="-1"><a class="header-anchor" href="#扩展到k8s" aria-hidden="true">#</a> 扩展到k8s</h1><h5 id="云原生时代" tabindex="-1"><a class="header-anchor" href="#云原生时代" aria-hidden="true">#</a> 云原生时代</h5><blockquote><p>GO语言！必须掌握！</p><blockquote><p>GO是并发语言</p></blockquote></blockquote>`,32);function N(P,E){const n=o("ExternalLinkIcon");return l(),c("div",null,[d,p,a("p",null,[a("a",u,[e("https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package"),s(n)])]),m,a("p",null,[a("a",h,[e("https://docs.microsoft.com/zh-cn/windows/wsl/install-manual"),s(n)])]),k,a("p",null,[e('"'),a("a",b,[e("https://rvpdnlir.mirror.aliyuncs.com"),s(n)]),e('",'),v,e(' "'),a("a",f,[e("https://hub-mirror.c.163.com"),s(n)]),e('",'),g,e(' "'),a("a",_,[e("https://mirror.baidubce.com"),s(n)]),e('"')]),x,a("ol",null,[a("li",null,[e("应用 "),a("a",w,[e("app.py"),s(n)])]),y,q,D]),O])}const I=i(t,[["render",N],["__file","docker命令.html.vue"]]);export{I as default};
