import{_ as e,c as l,o as i,ag as t}from"./chunks/framework.DPDPlp3K.js";const p=JSON.parse('{"title":"基础","description":"","frontmatter":{"title":"基础","date":"2020-01-01T09:02:55.000Z","categories":["编程语言","Java"],"tags":["Java"]},"headers":[],"relativePath":"notes/basics/be/java/index.md","filePath":"notes/basics/be/java/index.md"}'),s={name:"notes/basics/be/java/index.md"};function r(o,a,h,n,c,u){return i(),l("div",null,a[0]||(a[0]=[t('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><ul><li><p>基本数据类型</p><ul><li>数值型 <ul><li>整数类型 <ul><li>byte 字节 = 8bit 位</li><li>short 2字节16位</li><li>int 4字节32位 包装器类有-128——127的常量池 <code>是Java的默认整数类型</code></li><li>long 8字节64位</li></ul></li><li>浮点类型 <ul><li>float 4字节</li><li>double 8字节 <code>是Java默认的浮点数据类型</code></li></ul></li><li>字符型 char 2字节</li><li>布尔型 boolean 1字节</li></ul></li></ul></li><li><p>引用数据类型</p><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul><h1 id="条件控制" tabindex="-1">条件控制 <a class="header-anchor" href="#条件控制" aria-label="Permalink to &quot;条件控制&quot;">​</a></h1><ul><li>if else</li><li>while</li><li>for <ul><li>for(;;)等价于while(true)</li></ul></li><li>when case case的类型仅限于 byte,short,int,char,enum，long不能作为case类型</li></ul><h1 id="访问修饰符" tabindex="-1">访问修饰符 <a class="header-anchor" href="#访问修饰符" aria-label="Permalink to &quot;访问修饰符&quot;">​</a></h1><ul><li>private 仅本类访问</li><li>default 本类及类所在包可访问</li><li>protected 本类，类所在包，继承当前类的子类可访问</li><li>public 所有类都可访问 接口的方法默认是public</li></ul><h1 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h1><h2 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-label="Permalink to &quot;封装&quot;">​</a></h2><p>封装属性和行为</p><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><p>能用接口，就不要用继承</p><ul><li>抽象类：抽象公共的方法和属性</li><li>接口： 定义一组行为规范</li></ul><p>this：指向当前类对象的一个引用</p><p>​ this() 构造方法，放到第一行</p><p>super：指向当前类最近的父类的一个引用</p><p>​ super() 父类的构造方法</p><p>​ super()和this()不能重复出现，因为this()已经调用了super()</p><h2 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-label="Permalink to &quot;多态&quot;">​</a></h2><p>变量的类型在运行时确认，而不是在编译是就写死</p><h1 id="常见api总结" tabindex="-1">常见API总结： <a class="header-anchor" href="#常见api总结" aria-label="Permalink to &quot;常见API总结：&quot;">​</a></h1><h2 id="和equals" tabindex="-1">==和equals <a class="header-anchor" href="#和equals" aria-label="Permalink to &quot;==和equals&quot;">​</a></h2><p>==： 判断两个对象的地址是不是相等，基本数据类型比较值是否相等</p><p>equals：判断两个对象的内容是否相等</p><p>​ <code>若重写equals,需要重写hascode。规定，两个对象相等，则hascode也一定相同。若不重写，会出现两个hascode相同的对象，但不是equals</code></p><p>​</p><h2 id="files" tabindex="-1">Files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;Files&quot;">​</a></h2><p>Files. exists()：检测⽂件路径是否存在。 Files. createFile()：创建⽂件。 Files. createDirectory()：创建⽂件夹。 Files. delete()：删除⼀个⽂件或⽬录。 Files. copy()：复制⽂件。 Files. move()：移动⽂件。 Files. size()：查看⽂件个数。 Files. read()：读取⽂件。 Files. write()：写⼊⽂件。</p><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><p>indexOf()：返回指定字符的索引。 charAt()：返回指定索引处的字符。 replace()：字符串替换。 trim()：去除字符串两端空⽩。 split()：分割字符串，返回⼀个分割后的字符串数组。 getBytes()：返回字符串的 byte 类型数组。 length()：返回字符串⻓度。 toLowerCase()：将字符串转成⼩写字⺟。 toUpperCase()：将字符串转成⼤写字符。 substring()：截取字符串。 equals()：字符串⽐较。</p><h1 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h1><ul><li><a href="/notes/basics/be/java/JSP_Servlet笔记.html">JSP/Servlet及相关技术详解</a></li><li><a href="/notes/basics/be/java/JUC.html">JUC</a></li><li><a href="/notes/basics/be/java/学习笔记《java开发手册》.html">《Java开发手册》学习笔记</a></li><li><a href="/notes/basics/be/java/学习笔记《疯狂Java讲义》.html">《疯狂Java讲义》学习笔记</a></li><li><a href="/notes/basics/be/java/学习笔记《码出高效：Java开发手册》.html">《码出高效：Java开发手册》学习笔记</a></li><li><a href="/notes/basics/be/java/抽象类和接口.html">抽象类和接口</a></li><li><a href="/notes/basics/be/java/集合.html">集合</a></li></ul>',31)]))}const b=e(s,[["render",r]]);export{p as __pageData,b as default};
