import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.DPDPlp3K.js";const r=JSON.parse('{"title":"Bash脚本笔记","description":"","frontmatter":{"title":"Bash脚本笔记","date":"2020-01-01T09:02:55.000Z","categories":["后端技术","Bash"],"tags":["Bash"]},"headers":[],"relativePath":"notes/other/tool/bash/index.md","filePath":"notes/other/tool/bash/index.md"}'),l={name:"notes/other/tool/bash/index.md"};function p(t,s,h,d,o,c){return e(),a("div",null,s[0]||(s[0]=[n(`<p><em><a href="https://wangdoc.com/bash/intro.html" target="_blank" rel="noreferrer">https://wangdoc.com/bash/intro.html</a></em><em><a href="https://github.com/wangdoc/bash-tutorial" target="_blank" rel="noreferrer">https://github.com/wangdoc/bash-tutorial</a></em></p><h4 id="_1-变量" tabindex="-1">1. 变量 <a class="header-anchor" href="#_1-变量" aria-label="Permalink to &quot;1. 变量&quot;">​</a></h4><h4 id="_2-函数" tabindex="-1">2. 函数 <a class="header-anchor" href="#_2-函数" aria-label="Permalink to &quot;2. 函数&quot;">​</a></h4><h4 id="_3-循环" tabindex="-1">3. 循环 <a class="header-anchor" href="#_3-循环" aria-label="Permalink to &quot;3. 循环&quot;">​</a></h4><h4 id="_4-顺序" tabindex="-1">4. 顺序 <a class="header-anchor" href="#_4-顺序" aria-label="Permalink to &quot;4. 顺序&quot;">​</a></h4><h4 id="_5-特殊符号" tabindex="-1">5. 特殊符号 <a class="header-anchor" href="#_5-特殊符号" aria-label="Permalink to &quot;5. 特殊符号&quot;">​</a></h4><h4 id="_6-正则表达式" tabindex="-1">6. 正则表达式 <a class="header-anchor" href="#_6-正则表达式" aria-label="Permalink to &quot;6. 正则表达式&quot;">​</a></h4><blockquote><p>bash</p></blockquote><h4 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h4><ol><li>shenbang行</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 脚本第一行通常是指定解释器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#! /bin/bash</span></span></code></pre></div><ol start="2"><li>执行权限和路径</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 给脚本赋权</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 744</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scaript.sh</span></span></code></pre></div><ol start="3"><li><p>env命令</p><p>env指向 /usr/bin/env</p></li><li><p>注释</p></li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注释</span></span></code></pre></div><ol start="5"><li>脚本参数</li></ol><ul><li>$0 脚本文件名</li><li>$1 ~ $9 对应脚本的第一到第九个参数</li><li>$# 参数的总数</li><li>$@ 全部的参数，参数之间使用空格分隔</li><li>$* 全部的参数</li></ul><ol start="6"><li>shift命令</li></ol><p>? shift命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#! /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;一共输入了$#个参数&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;剩下$#个参数&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;参数：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	shift</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><ol start="7"><li>getopts命令</li></ol><p>? 取出脚本所有的带有前置连词线（-）的参数</p><ol start="8"><li>配置项参数中止符</li></ol><p>? -- 强制后面的变量只能是路径</p><ol start="9"><li>exit命令</li></ol><p>? 用于终止当前脚本的执行，并向shell返回一个退出值</p><ol start="10"><li>命令执行结果</li></ol><p>? 命令执行结束后，会有一个返回值。</p><p>? 0表示执行成功，非0（通常是1) 表示执行失败。</p><p>? 环境变量$? 可以读取前一个命令的返回值</p><ol start="11"><li>source命令</li></ol><p>? 用于执行一个脚本，通常用于重新加载一个配置文件</p><ol start="12"><li>别名，alias 命令</li></ol><h4 id="_2-基本语法" tabindex="-1">2. 基本语法 <a class="header-anchor" href="#_2-基本语法" aria-label="Permalink to &quot;2. 基本语法&quot;">​</a></h4><ol><li>echo命令</li></ol><p>? 屏幕输出一行文本，可以将该命令的参数原样输出</p><p>? 若输出多行，需将多行文本放在引号里面</p><p>? 1.1 -n参数</p><p>? 取消末尾的回车符</p><p>? 1.2 -e参数</p><p>? 会解释引号里面的特殊字符</p><ol start="2"><li>命令格式</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [arg1 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [argN]]</span></span></code></pre></div><ol start="3"><li>空格</li></ol><p>? bash使用空格区分不同的参数</p><ol start="4"><li>分号</li></ol><p>? 分号是命令的结束符，使得一行可以放置多个命令，上一个命令执行结束后，再执行第二个命令</p><ol start="5"><li><p>命令的组合符 &amp;&amp; ||</p></li><li><p>type命令</p><p>判断命令的来源</p></li><li><p>快捷键</p></li></ol><ul><li><code>Ctrl + L</code>：清除屏幕并将当前行移到页面顶部。</li><li><code>Ctrl + C</code>：中止当前正在执行的命令。</li><li><code>Shift + PageUp</code>：向上滚动。</li><li><code>Shift + PageDown</code>：向下滚动。</li><li><code>Ctrl + U</code>：从光标位置删除到行首。</li><li><code>Ctrl + K</code>：从光标位置删除到行尾。</li><li><code>Ctrl + D</code>：关闭 Shell 会话。</li><li><code>↑</code>，<code>↓</code>：浏览已执行命令的历史记录。</li></ul><h4 id="_3-模式扩展" tabindex="-1">3. 模式扩展 <a class="header-anchor" href="#_3-模式扩展" aria-label="Permalink to &quot;3. 模式扩展&quot;">​</a></h4><ol><li><p>简介</p><p>Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元（token）。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。</p><p>Bash 一共提供八种扩展：</p><ul><li>波浪线扩展</li><li><code>?</code> 字符扩展</li><li><code>*</code> 字符扩展</li><li>方括号扩展</li><li>大括号扩展</li><li>变量扩展</li><li>子命令扩展</li><li>算术扩展</li></ul></li><li><p>波浪线扩展</p><p>波浪线<code>~</code>会自动扩展成当前用户的主目录。</p></li><li><p><code>?</code> 字符扩展</p><p><code>?</code>字符代表文件路径里面的任意单个字符，不包括空字符。</p></li><li><p><code>*</code> 字符扩展</p><p><code>*</code>字符代表文件路径里面的任意数量的任意字符，包括零个字符。</p></li><li><p>方括号扩展</p><p>方括号扩展的形式是<code>[...]</code>，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。括号之中的任意一个字符。比如，<code>[aeiou]</code>可以匹配五个元音字母中的任意一个。</p><p>[start-end] 表示匹配一个连续的范围。比如，<code>[a-c]</code>等同于<code>[abc]</code>，<code>[0-9]</code>匹配<code>[0123456789]</code>。</p></li><li><p>大括号扩展</p><p>大括号扩展<code>{...}</code>表示分别扩展成大括号里面的所有值，各个值之间使用逗号分隔。比如，<code>{1,2,3}</code>扩展成<code>1 2 3</code>。</p><p><code>{start..end}</code>，表示扩展成一个连续序列。比如，<code>{a..z}</code>可以扩展成26个小写英文字母。</p></li><li><p>变量扩展</p><p>Bash 将美元符号<code>$</code>开头的词元视为变量，将其扩展成变量值</p></li><li><p>子命令扩展</p><p><code>$(...)</code>可以扩展成另一个命令的运行结果，该命令的所有输出都会作为返回值。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Jan</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 28</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 00:01:13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2020</span></span></code></pre></div></li><li><p>算术扩展</p><p><code>$((...))</code>可以扩展成整数运算的结果</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4</span></span></code></pre></div></li><li><p>字符类</p><p><code>[[:class:]]</code>表示一个字符类，扩展成某一类特定字符之中的一个。常用的字符类如下。</p><ul><li><code>[[:alnum:]]</code>：匹配任意英文字母与数字</li><li><code>[[:alpha:]]</code>：匹配任意英文字母</li><li><code>[[:blank:]]</code>：空格和 Tab 键。</li><li><code>[[:cntrl:]]</code>：ASCII 码 0-31 的不可打印字符。</li><li><code>[[:digit:]]</code>：匹配任意数字 0-9。</li><li><code>[[:graph:]]</code>：A-Z、a-z、0-9 和标点符号。</li><li><code>[[:lower:]]</code>：匹配任意小写字母 a-z。</li><li><code>[[:print:]]</code>：ASCII 码 32-127 的可打印字符。</li><li><code>[[:punct:]]</code>：标点符号（除了 A-Z、a-z、0-9 的可打印字符）。</li><li><code>[[:space:]]</code>：空格、Tab、LF（10）、VT（11）、FF（12）、CR（13）。</li><li><code>[[:upper:]]</code>：匹配任意大写字母 A-Z。</li><li><code>[[:xdigit:]]</code>：16进制字符（A-F、a-f、0-9）。</li></ul></li><li><p>使用注意点</p><p>通配符有一些使用注意点：</p><p><strong>（1）通配符是先解释，再执行。</strong></p><p><strong>（2）文件名扩展在不匹配时，会原样输出。</strong></p><p><strong>（3）只适用于单层路径。</strong></p><p><strong>（4）文件名可以使用通配符。</strong></p></li><li><p>量词语法</p><ul><li><code>?(pattern-list)</code>：匹配零个或一个模式。</li><li><code>*(pattern-list)</code>：匹配零个或多个模式。</li><li><code>+(pattern-list)</code>：匹配一个或多个模式。</li><li><code>@(pattern-list)</code>：只匹配一个模式。</li><li><code>!(pattern-list)</code>：匹配零个或一个以上的模式，但不匹配单独一个的模式。</li></ul></li><li><p>shopt命令</p><p><code>shopt</code>命令可以调整 Bash 的行为。它有好几个参数跟通配符扩展有关。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打开某个参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shopt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [optionname]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关闭某个参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shopt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [optionname]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询某个参数关闭还是打开</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [optionname]</span></span></code></pre></div></li></ol><h4 id="_4-引号和转义" tabindex="-1">4. 引号和转义 <a class="header-anchor" href="#_4-引号和转义" aria-label="Permalink to &quot;4. 引号和转义&quot;">​</a></h4><ol><li><p>转义</p><p>些字符在 Bash 里面有特殊含义（比如<code>$</code>、<code>&amp;</code>、<code>*</code>）。</p><p>如果想要原样输出这些特殊字符，就必须在它们前面加上反斜杠，使其变成普通字符。这就叫做“转义”（escape）。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$date</span></span></code></pre></div><ul><li><code>\\a</code>：响铃</li><li><code>\\b</code>：退格</li><li><code>\\n</code>：换行</li><li><code>\\r</code>：回车</li><li><code>\\t</code>：制表符</li></ul></li><li><p>单引号</p><p>单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（<code>*</code>）、美元符号（<code>$</code>）、反斜杠（<code>\\</code>）等。</p></li><li><p>双引号</p><p>双引号比单引号宽松，大部分特殊字符在双引号里面，都会失去特殊含义，变成普通字符。</p><p>但是，三个特殊字符除外：美元符号（<code>$</code>）、反引号（\`\`\`）和反斜杠（<code>\\</code>）。这三个字符在双引号之中，依然有特殊含义，会被 Bash 自动扩展。</p><p>双引号还有一个作用，就是保存原始命令的输出格式。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 单行输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">一月</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2020</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 日</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 一</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 二</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 三</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 四</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 五</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 六</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 原始格式输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      一月</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2020</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">日</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 一</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 二</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 三</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 四</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 五</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 六</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 13</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 17</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">19</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">26</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 28</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 29</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31</span></span></code></pre></div></li><li><p>here文档</p><p>它的格式分成开始标记（<code>&lt;&lt; token</code>）和结束标记（<code>token</code>）。</p></li><li><p>here字符串</p><p>作用是将字符串通过标准输入，传递给命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hi there&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等同于</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hi there&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cat</span></span></code></pre></div></li></ol><h4 id="_5-变量" tabindex="-1">5. 变量 <a class="header-anchor" href="#_5-变量" aria-label="Permalink to &quot;5. 变量&quot;">​</a></h4><ol><li>环境变量</li><li>自定义变量</li></ol><h4 id="_6-字符串操作" tabindex="-1">6. 字符串操作 <a class="header-anchor" href="#_6-字符串操作" aria-label="Permalink to &quot;6. 字符串操作&quot;">​</a></h4><ol><li><p>字符串的长度</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varname}</span></span></code></pre></div></li><li><p>子字符串</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${varname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">offset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length}</span></span></code></pre></div></li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count=frogfootman</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">4}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foot</span></span></code></pre></div><ol start="3"><li><p>搜索和替换</p><p><strong>（1）字符串头部的模式匹配。</strong></p><p><strong>（2）字符串尾部的模式匹配。</strong></p><p><strong>（3）任意位置的模式匹配。</strong></p></li><li><p>改变大小写</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 转为大写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${varname^^}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 转为小写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${varname,,}</span></span></code></pre></div></li></ol><h4 id="_7-算术运算" tabindex="-1">7. 算术运算 <a class="header-anchor" href="#_7-算术运算" aria-label="Permalink to &quot;7. 算术运算&quot;">​</a></h4><h4 id="_8-行操作" tabindex="-1">8. 行操作 <a class="header-anchor" href="#_8-行操作" aria-label="Permalink to &quot;8. 行操作&quot;">​</a></h4><h4 id="_9-目录堆栈" tabindex="-1">9. 目录堆栈 <a class="header-anchor" href="#_9-目录堆栈" aria-label="Permalink to &quot;9. 目录堆栈&quot;">​</a></h4><h4 id="_10-脚本入门" tabindex="-1">10. 脚本入门 <a class="header-anchor" href="#_10-脚本入门" aria-label="Permalink to &quot;10. 脚本入门&quot;">​</a></h4><h4 id="_11-read命令" tabindex="-1">11. read命令 <a class="header-anchor" href="#_11-read命令" aria-label="Permalink to &quot;11. read命令&quot;">​</a></h4><h4 id="_12-条件判断" tabindex="-1">12. 条件判断 <a class="header-anchor" href="#_12-条件判断" aria-label="Permalink to &quot;12. 条件判断&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if commands; then</span></span>
<span class="line"><span>  commands</span></span>
<span class="line"><span>[elif commands; then</span></span>
<span class="line"><span>  commands...]</span></span>
<span class="line"><span>[else</span></span>
<span class="line"><span>  commands]</span></span>
<span class="line"><span>fi</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $USER </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello foo.&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are not foo.&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 写法一</span></span>
<span class="line"><span>test expression</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 写法二</span></span>
<span class="line"><span>[ expression ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 写法三</span></span>
<span class="line"><span>[[ expression ]]</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写法一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/foo.txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Found foo.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写法二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /tmp/foo.txt ] ; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Found foo.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写法三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /tmp/foo.txt ]] ; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Found foo.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h6 id="文件判断" tabindex="-1">文件判断 <a class="header-anchor" href="#文件判断" aria-label="Permalink to &quot;文件判断&quot;">​</a></h6><ul><li><code>[ -a file ]</code>：如果 file 存在，则为<code>true</code>。</li><li><code>[ -b file ]</code>：如果 file 存在并且是一个块（设备）文件，则为<code>true</code>。</li><li><code>[ -c file ]</code>：如果 file 存在并且是一个字符（设备）文件，则为<code>true</code>。</li><li><code>[ -d file ]</code>：如果 file 存在并且是一个目录，则为<code>true</code>。</li><li><code>[ -e file ]</code>：如果 file 存在，则为<code>true</code>。</li><li><code>[ -f file ]</code>：如果 file 存在并且是一个普通文件，则为<code>true</code>。</li><li><code>[ -g file ]</code>：如果 file 存在并且设置了组 ID，则为<code>true</code>。</li><li><code>[ -G file ]</code>：如果 file 存在并且属于有效的组 ID，则为<code>true</code>。</li><li><code>[ -h file ]</code>：如果 file 存在并且是符号链接，则为<code>true</code>。</li><li><code>[ -k file ]</code>：如果 file 存在并且设置了它的“sticky bit”，则为<code>true</code>。</li><li><code>[ -L file ]</code>：如果 file 存在并且是一个符号链接，则为<code>true</code>。</li><li><code>[ -N file ]</code>：如果 file 存在并且自上次读取后已被修改，则为<code>true</code>。</li><li><code>[ -O file ]</code>：如果 file 存在并且属于有效的用户 ID，则为<code>true</code>。</li><li><code>[ -p file ]</code>：如果 file 存在并且是一个命名管道，则为<code>true</code>。</li><li><code>[ -r file ]</code>：如果 file 存在并且可读（当前用户有可读权限），则为<code>true</code>。</li><li><code>[ -s file ]</code>：如果 file 存在且其长度大于零，则为<code>true</code>。</li><li><code>[ -S file ]</code>：如果 file 存在且是一个网络 socket，则为<code>true</code>。</li><li><code>[ -t fd ]</code>：如果 fd 是一个文件描述符，并且重定向到终端，则为<code>true</code>。 这可以用来判断是否重定向了标准输入／输出／错误。</li><li><code>[ -u file ]</code>：如果 file 存在并且设置了 setuid 位，则为<code>true</code>。</li><li><code>[ -w file ]</code>：如果 file 存在并且可写（当前用户拥有可写权限），则为<code>true</code>。</li><li><code>[ -x file ]</code>：如果 file 存在并且可执行（有效用户有执行／搜索权限），则为<code>true</code>。</li><li><code>[ file1 -nt file2 ]</code>：如果 FILE1 比 FILE2 的更新时间最近，或者 FILE1 存在而 FILE2 不存在，则为<code>true</code>。</li><li><code>[ file1 -ot file2 ]</code>：如果 FILE1 比 FILE2 的更新时间更旧，或者 FILE2 存在而 FILE1 不存在，则为<code>true</code>。</li><li><code>[ FILE1 -ef FILE2 ]</code>：如果 FILE1 和 FILE2 引用相同的设备和 inode 编号，则为<code>true</code>。</li></ul><h6 id="字符串判断" tabindex="-1">字符串判断 <a class="header-anchor" href="#字符串判断" aria-label="Permalink to &quot;字符串判断&quot;">​</a></h6><ul><li><code>[ string ]</code>：如果<code>string</code>不为空（长度大于0），则判断为真。</li><li><code>[ -n string ]</code>：如果字符串<code>string</code>的长度大于零，则判断为真。</li><li><code>[ -z string ]</code>：如果字符串<code>string</code>的长度为零，则判断为真。</li><li><code>[ string1 = string2 ]</code>：如果<code>string1</code>和<code>string2</code>相同，则判断为真。</li><li><code>[ string1 == string2 ]</code> 等同于<code>[ string1 = string2 ]</code>。</li><li><code>[ string1 != string2 ]</code>：如果<code>string1</code>和<code>string2</code>不相同，则判断为真。</li><li><code>[ string1 &#39;&gt;&#39; string2 ]</code>：如果按照字典顺序<code>string1</code>排列在<code>string2</code>之后，则判断为真。</li><li><code>[ string1 &#39;&lt;&#39; string2 ]</code>：如果按照字典顺序<code>string1</code>排列在<code>string2</code>之前，则判断为真。</li></ul><h6 id="整数判断" tabindex="-1">整数判断 <a class="header-anchor" href="#整数判断" aria-label="Permalink to &quot;整数判断&quot;">​</a></h6><ul><li><code>[ integer1 -eq integer2 ]</code>：如果<code>integer1</code>等于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -ne integer2 ]</code>：如果<code>integer1</code>不等于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -le integer2 ]</code>：如果<code>integer1</code>小于或等于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -lt integer2 ]</code>：如果<code>integer1</code>小于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -ge integer2 ]</code>：如果<code>integer1</code>大于或等于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -gt integer2 ]</code>：如果<code>integer1</code>大于<code>integer2</code>，则为<code>true</code>。</li></ul><h6 id="正则判断" tabindex="-1">正则判断 <a class="header-anchor" href="#正则判断" aria-label="Permalink to &quot;正则判断&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[[ string1 =~ regex ]]</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$INT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ^-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[0-9]+$ ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;INT is an integer.&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;INT is not an integer.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&amp;2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><ul><li><code>AND</code>运算：符号<code>&amp;&amp;</code>，也可使用参数<code>-a</code>。</li><li><code>OR</code>运算：符号<code>||</code>，也可使用参数<code>-o</code>。</li><li><code>NOT</code>运算：符号<code>!</code>。</li></ul><p>Bash 还提供了<code>((...))</code>作为算术条件，进行算术运算的判断</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ command1 &amp;&amp; command2</span></span>
<span class="line"><span>$ command1 || command2</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>case expression in</span></span>
<span class="line"><span>  pattern )</span></span>
<span class="line"><span>    commands ;;</span></span>
<span class="line"><span>  pattern )</span></span>
<span class="line"><span>    commands ;;</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>esac</span></span></code></pre></div><h4 id="_13-循环" tabindex="-1">13. 循环 <a class="header-anchor" href="#_13-循环" aria-label="Permalink to &quot;13. 循环&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>while condition; do</span></span>
<span class="line"><span>  commands</span></span>
<span class="line"><span>done</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>until condition; do</span></span>
<span class="line"><span>  commands</span></span>
<span class="line"><span>done</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for variable in list</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>  commands</span></span>
<span class="line"><span>done</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for (( expression1; expression2; expression3 )); do</span></span>
<span class="line"><span>  commands</span></span>
<span class="line"><span>done</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for number in 1 2 3 4 5 6</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>  echo &quot;number is $number&quot;</span></span>
<span class="line"><span>  if [ &quot;$number&quot; = &quot;3&quot; ]; then</span></span>
<span class="line"><span>    break</span></span>
<span class="line"><span>  fi</span></span>
<span class="line"><span>done</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select name</span></span>
<span class="line"><span>[in list]</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>  commands</span></span>
<span class="line"><span>done</span></span></code></pre></div><h4 id="_14-函数" tabindex="-1">14. 函数 <a class="header-anchor" href="#_14-函数" aria-label="Permalink to &quot;14. 函数&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 第一种</span></span>
<span class="line"><span>fn() {</span></span>
<span class="line"><span>  # codes</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 第二种</span></span>
<span class="line"><span>function fn() {</span></span>
<span class="line"><span>  # codes</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><code>$1</code>~<code>$9</code>：函数的第一个到第9个的参数。</li><li><code>$0</code>：函数所在的脚本名。</li><li><code>$#</code>：函数的参数总数。</li><li><code>$@</code>：函数的全部参数，参数之间使用空格分隔。</li><li><code>$*</code>：函数的全部参数，参数之间使用变量<code>$IFS</code>值的第一个字符分隔，默认为空格，但是可以自定义。</li></ul><p><code>return</code>命令用于从函数返回一个值。函数执行到这条命令，就不再往下执行了，直接返回了。</p><h4 id="_15-数组" tabindex="-1">15. 数组 <a class="header-anchor" href="#_15-数组" aria-label="Permalink to &quot;15. 数组&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ARRAY[INDEX]=value</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> echo \${array[i]}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo \${foo[@]}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo \${foo[0]}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\${#array[*]}</span></span>
<span class="line"><span>\${#array[@]}</span></span></code></pre></div><p><code>\${!array[@]}</code>或<code>\${!array[*]}</code>，可以返回数组的成员序号，即哪些位置是有值的。</p><p><code>\${array[@]:position:length}</code>的语法可以提取数组成员。</p><p>数组末尾追加成员，可以使用<code>+=</code>赋值运算符。它能够自动地把值追加到数组末尾。</p><p>删除一个数组成员，使用<code>unset</code>命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>unset foo[2]</span></span></code></pre></div><p><code>declare -A</code>可以声明关联数组。</p><h4 id="_16-set命令-shopt命令" tabindex="-1">16. set命令，shopt命令 <a class="header-anchor" href="#_16-set命令-shopt命令" aria-label="Permalink to &quot;16. set命令，shopt命令&quot;">​</a></h4><h4 id="_17-脚本除错" tabindex="-1">17. 脚本除错 <a class="header-anchor" href="#_17-脚本除错" aria-label="Permalink to &quot;17. 脚本除错&quot;">​</a></h4><ul><li>bash -x</li></ul><h4 id="_18-mktemp-命令-trap命令" tabindex="-1">18. mktemp 命令，trap命令 <a class="header-anchor" href="#_18-mktemp-命令-trap命令" aria-label="Permalink to &quot;18. mktemp 命令，trap命令&quot;">​</a></h4><p>直接运行<code>mktemp</code>命令，就能生成一个临时文件。<code>-d</code>参数可以创建一个临时目录。</p><p><code>trap</code>命令用来在 Bash 脚本中响应系统信号。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ trap -l</span></span>
<span class="line"><span> 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP</span></span>
<span class="line"><span> 6) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1</span></span>
<span class="line"><span>11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM</span></span>
<span class="line"><span>16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP</span></span>
<span class="line"><span>21) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ</span></span>
<span class="line"><span>26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR</span></span>
<span class="line"><span>31) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3</span></span>
<span class="line"><span>38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8</span></span>
<span class="line"><span>43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13</span></span>
<span class="line"><span>48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12</span></span>
<span class="line"><span>53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7</span></span>
<span class="line"><span>58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2</span></span>
<span class="line"><span>63) SIGRTMAX-1	64) SIGRTMAX</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ trap [动作] [信号1] [信号2] ...</span></span></code></pre></div><ul><li>HUP：编号1，脚本与所在的终端脱离联系。</li><li>INT：编号2，用户按下 Ctrl + C，意图让脚本终止运行。</li><li>QUIT：编号3，用户按下 Ctrl + 斜杠，意图退出脚本。</li><li>KILL：编号9，该信号用于杀死进程。</li><li>TERM：编号15，这是<code>kill</code>命令发出的默认信号。</li><li>EXIT：编号0，这不是系统信号，而是 Bash 脚本特有的信号，不管什么情况，只要退出脚本就会产生。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rm -f &quot;$TMPFILE&quot;&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EXIT</span></span></code></pre></div><h4 id="_19-启动环境" tabindex="-1">19. 启动环境 <a class="header-anchor" href="#_19-启动环境" aria-label="Permalink to &quot;19. 启动环境&quot;">​</a></h4><p>为了方便 Debug，有时在启动 Bash 的时候，可以加上启动参数。</p><ul><li><code>-n</code>：不运行脚本，只检查是否有语法错误。</li><li><code>-v</code>：输出每一行语句运行结果前，会先输出该行语句。</li><li><code>-x</code>：每一个命令处理之前，先输出该命令，再执行该命令。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ bash -n scriptname</span></span>
<span class="line"><span>$ bash -v scriptname</span></span>
<span class="line"><span>$ bash -x scriptname</span></span></code></pre></div><h4 id="_20-命令提示符" tabindex="-1">20. 命令提示符 <a class="header-anchor" href="#_20-命令提示符" aria-label="Permalink to &quot;20. 命令提示符&quot;">​</a></h4><ul><li>可以自定义</li></ul><h1 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h1><ul><li><a href="/notes/other/tool/bash/常用命令.html">常用命令</a></li></ul>`,123)]))}const g=i(l,[["render",p]]);export{r as __pageData,g as default};
